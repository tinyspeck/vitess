/*
Copyright 2019 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This package contains a service allowing you to use vtctld as a
// proxy for vt commands.

syntax = "proto3";
option go_package = "vitess.io/vitess/go/vt/proto/vtctlservice";

package vtctlservice;

import "vtctldata.proto";

// Service Vtctl allows you to call vt commands through gRPC.
service Vtctl {
  rpc ExecuteVtctlCommand (vtctldata.ExecuteVtctlCommandRequest) returns (stream vtctldata.ExecuteVtctlCommandResponse) {};
}

// Service Vtctld exposes gRPC endpoints for each vt command.
service Vtctld {
  // ChangeTabletType changes the db type for the specified tablet, if possible.
  // This is used primarily to arrange replicas, and it will not convert a
  // primary. For that, use InitShardPrimary.
  //
  // NOTE: This command automatically updates the serving graph.
  rpc ChangeTabletType(vtctldata.ChangeTabletTypeRequest) returns (vtctldata.ChangeTabletTypeResponse) {};
  // CreateKeyspace creates the specified keyspace in the topology. For a
  // SNAPSHOT keyspace, the request must specify the name of a base keyspace,
  // as well as a snapshot time.
  rpc CreateKeyspace(vtctldata.CreateKeyspaceRequest) returns (vtctldata.CreateKeyspaceResponse) {};
  // CreateShard creates the specified shard in the topology.
  rpc CreateShard(vtctldata.CreateShardRequest) returns (vtctldata.CreateShardResponse) {};
  // DeleteKeyspace deletes the specified keyspace from the topology. In
  // recursive mode, it also recursively deletes all shards in the keyspace.
  // Otherwise, the keyspace must be empty (have no shards), or DeleteKeyspace
  // returns an error.
  rpc DeleteKeyspace(vtctldata.DeleteKeyspaceRequest) returns (vtctldata.DeleteKeyspaceResponse) {};
  // DeleteShards deletes the specified shards from the topology. In recursive
  // mode, it also deletes all tablets belonging to the shard. Otherwise, the
  // shard must be empty (have no tablets) or DeleteShards returns an error for
  // that shard.
  rpc DeleteShards(vtctldata.DeleteShardsRequest) returns (vtctldata.DeleteShardsResponse) {};
  // DeleteTablets deletes one or more tablets from the topology.
  rpc DeleteTablets(vtctldata.DeleteTabletsRequest) returns (vtctldata.DeleteTabletsResponse) {};
  // FindAllShardsInKeyspace returns a map of shard names to shard references
  // for a given keyspace.
  rpc FindAllShardsInKeyspace(vtctldata.FindAllShardsInKeyspaceRequest) returns (vtctldata.FindAllShardsInKeyspaceResponse) {};
  // GetBackups returns all the backups for a shard.
  rpc GetBackups(vtctldata.GetBackupsRequest) returns (vtctldata.GetBackupsResponse) {};
  // GetCellInfoNames returns all the cells for which we have a CellInfo object,
  // meaning we have a topology service registered.
  rpc GetCellInfoNames(vtctldata.GetCellInfoNamesRequest) returns (vtctldata.GetCellInfoNamesResponse) {};
  // GetCellInfo returns the information for a cell.
  rpc GetCellInfo(vtctldata.GetCellInfoRequest) returns (vtctldata.GetCellInfoResponse) {};
  // GetCellsAliases returns a mapping of cell alias to cells identified by that
  // alias.
  rpc GetCellsAliases(vtctldata.GetCellsAliasesRequest) returns (vtctldata.GetCellsAliasesResponse) {};
  // GetKeyspace reads the given keyspace from the topo and returns it.
  rpc GetKeyspace(vtctldata.GetKeyspaceRequest) returns (vtctldata.GetKeyspaceResponse) {};
  // GetKeyspaces returns the keyspace struct of all keyspaces in the topo.
  rpc GetKeyspaces(vtctldata.GetKeyspacesRequest) returns (vtctldata.GetKeyspacesResponse) {};
  // GetSchema returns the schema for a tablet, or just the schema for the
  // specified tables in that tablet.
  rpc GetSchema(vtctldata.GetSchemaRequest) returns (vtctldata.GetSchemaResponse) {};
  // GetShard returns information about a shard in the topology.
  rpc GetShard(vtctldata.GetShardRequest) returns (vtctldata.GetShardResponse) {};
  // GetSrvVSchema returns a the SrvVSchema for a cell.
  rpc GetSrvVSchema(vtctldata.GetSrvVSchemaRequest) returns (vtctldata.GetSrvVSchemaResponse) {};
  // GetTablet returns information about a tablet.
  rpc GetTablet(vtctldata.GetTabletRequest) returns (vtctldata.GetTabletResponse) {};
  // GetTablets returns tablets, optionally filtered by keyspace and shard.
  rpc GetTablets(vtctldata.GetTabletsRequest) returns (vtctldata.GetTabletsResponse) {};
  // GetVSchema returns the vschema for a keyspace.
  rpc GetVSchema(vtctldata.GetVSchemaRequest) returns (vtctldata.GetVSchemaResponse) {};
  // GetWorkflows returns a list of workflows for the given keyspace.
  rpc GetWorkflows(vtctldata.GetWorkflowsRequest) returns (vtctldata.GetWorkflowsResponse) {};
  // RemoveKeyspaceCell removes the specified cell from the Cells list for all
  // shards in the specified keyspace, as well as from the SrvKeyspace for that
  // keyspace in that cell.
  rpc RemoveKeyspaceCell(vtctldata.RemoveKeyspaceCellRequest) returns (vtctldata.RemoveKeyspaceCellResponse) {};
  // RemoveShardCell removes the specified cell from the specified shard's Cells
  // list.
  rpc RemoveShardCell(vtctldata.RemoveShardCellRequest) returns (vtctldata.RemoveShardCellResponse) {};
}
