// source: vreplication.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.vreplication.VRepStream', null, global);
goog.exportSymbol('proto.vreplication.VRepStreamState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vreplication.VRepStream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vreplication.VRepStream.repeatedFields_, null);
};
goog.inherits(proto.vreplication.VRepStream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vreplication.VRepStream.displayName = 'proto.vreplication.VRepStream';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vreplication.VRepStream.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vreplication.VRepStream.prototype.toObject = function(opt_includeInstance) {
  return proto.vreplication.VRepStream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vreplication.VRepStream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vreplication.VRepStream.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    workflow: jspb.Message.getFieldWithDefault(msg, 2, ""),
    source: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pos: jspb.Message.getFieldWithDefault(msg, 4, ""),
    stopPos: jspb.Message.getFieldWithDefault(msg, 5, ""),
    maxTps: jspb.Message.getFieldWithDefault(msg, 6, 0),
    maxReplicationLag: jspb.Message.getFieldWithDefault(msg, 7, 0),
    cell: jspb.Message.getFieldWithDefault(msg, 8, ""),
    tabletTypesList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    timeUpdated: jspb.Message.getFieldWithDefault(msg, 10, 0),
    transactionTimestamp: jspb.Message.getFieldWithDefault(msg, 11, 0),
    state: jspb.Message.getFieldWithDefault(msg, 12, 0),
    message: jspb.Message.getFieldWithDefault(msg, 13, ""),
    dbName: jspb.Message.getFieldWithDefault(msg, 14, ""),
    cluster: jspb.Message.getFieldWithDefault(msg, 15, ""),
    keyspace: jspb.Message.getFieldWithDefault(msg, 16, ""),
    shard: jspb.Message.getFieldWithDefault(msg, 17, ""),
    tabletAlias: jspb.Message.getFieldWithDefault(msg, 18, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vreplication.VRepStream}
 */
proto.vreplication.VRepStream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vreplication.VRepStream;
  return proto.vreplication.VRepStream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vreplication.VRepStream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vreplication.VRepStream}
 */
proto.vreplication.VRepStream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkflow(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPos(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStopPos(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxTps(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxReplicationLag(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCell(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addTabletTypes(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeUpdated(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTransactionTimestamp(value);
      break;
    case 12:
      var value = /** @type {!proto.vreplication.VRepStreamState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbName(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setCluster(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyspace(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setShard(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setTabletAlias(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vreplication.VRepStream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vreplication.VRepStream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vreplication.VRepStream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vreplication.VRepStream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getWorkflow();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPos();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStopPos();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMaxTps();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getMaxReplicationLag();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getCell();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTabletTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getTimeUpdated();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getTransactionTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getDbName();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getCluster();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getKeyspace();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getShard();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getTabletAlias();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.vreplication.VRepStream.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vreplication.VRepStream} returns this
 */
proto.vreplication.VRepStream.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string workflow = 2;
 * @return {string}
 */
proto.vreplication.VRepStream.prototype.getWorkflow = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vreplication.VRepStream} returns this
 */
proto.vreplication.VRepStream.prototype.setWorkflow = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string source = 3;
 * @return {string}
 */
proto.vreplication.VRepStream.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vreplication.VRepStream} returns this
 */
proto.vreplication.VRepStream.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string pos = 4;
 * @return {string}
 */
proto.vreplication.VRepStream.prototype.getPos = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.vreplication.VRepStream} returns this
 */
proto.vreplication.VRepStream.prototype.setPos = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string stop_pos = 5;
 * @return {string}
 */
proto.vreplication.VRepStream.prototype.getStopPos = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.vreplication.VRepStream} returns this
 */
proto.vreplication.VRepStream.prototype.setStopPos = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 max_tps = 6;
 * @return {number}
 */
proto.vreplication.VRepStream.prototype.getMaxTps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.vreplication.VRepStream} returns this
 */
proto.vreplication.VRepStream.prototype.setMaxTps = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 max_replication_lag = 7;
 * @return {number}
 */
proto.vreplication.VRepStream.prototype.getMaxReplicationLag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.vreplication.VRepStream} returns this
 */
proto.vreplication.VRepStream.prototype.setMaxReplicationLag = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string cell = 8;
 * @return {string}
 */
proto.vreplication.VRepStream.prototype.getCell = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.vreplication.VRepStream} returns this
 */
proto.vreplication.VRepStream.prototype.setCell = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * repeated string tablet_types = 9;
 * @return {!Array<string>}
 */
proto.vreplication.VRepStream.prototype.getTabletTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.vreplication.VRepStream} returns this
 */
proto.vreplication.VRepStream.prototype.setTabletTypesList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.vreplication.VRepStream} returns this
 */
proto.vreplication.VRepStream.prototype.addTabletTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vreplication.VRepStream} returns this
 */
proto.vreplication.VRepStream.prototype.clearTabletTypesList = function() {
  return this.setTabletTypesList([]);
};


/**
 * optional int64 time_updated = 10;
 * @return {number}
 */
proto.vreplication.VRepStream.prototype.getTimeUpdated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.vreplication.VRepStream} returns this
 */
proto.vreplication.VRepStream.prototype.setTimeUpdated = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 transaction_timestamp = 11;
 * @return {number}
 */
proto.vreplication.VRepStream.prototype.getTransactionTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.vreplication.VRepStream} returns this
 */
proto.vreplication.VRepStream.prototype.setTransactionTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional VRepStreamState state = 12;
 * @return {!proto.vreplication.VRepStreamState}
 */
proto.vreplication.VRepStream.prototype.getState = function() {
  return /** @type {!proto.vreplication.VRepStreamState} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.vreplication.VRepStreamState} value
 * @return {!proto.vreplication.VRepStream} returns this
 */
proto.vreplication.VRepStream.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional string message = 13;
 * @return {string}
 */
proto.vreplication.VRepStream.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.vreplication.VRepStream} returns this
 */
proto.vreplication.VRepStream.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string db_name = 14;
 * @return {string}
 */
proto.vreplication.VRepStream.prototype.getDbName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.vreplication.VRepStream} returns this
 */
proto.vreplication.VRepStream.prototype.setDbName = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string cluster = 15;
 * @return {string}
 */
proto.vreplication.VRepStream.prototype.getCluster = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.vreplication.VRepStream} returns this
 */
proto.vreplication.VRepStream.prototype.setCluster = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string keyspace = 16;
 * @return {string}
 */
proto.vreplication.VRepStream.prototype.getKeyspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.vreplication.VRepStream} returns this
 */
proto.vreplication.VRepStream.prototype.setKeyspace = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string shard = 17;
 * @return {string}
 */
proto.vreplication.VRepStream.prototype.getShard = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.vreplication.VRepStream} returns this
 */
proto.vreplication.VRepStream.prototype.setShard = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string tablet_alias = 18;
 * @return {string}
 */
proto.vreplication.VRepStream.prototype.getTabletAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.vreplication.VRepStream} returns this
 */
proto.vreplication.VRepStream.prototype.setTabletAlias = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * @enum {number}
 */
proto.vreplication.VRepStreamState = {
  RUNNING: 0,
  STOPPED: 1
};

goog.object.extend(exports, proto.vreplication);
