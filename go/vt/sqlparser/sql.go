//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const TABLE = 57441
const INDEX = 57442
const VIEW = 57443
const TO = 57444
const IGNORE = 57445
const IF = 57446
const UNIQUE = 57447
const PRIMARY = 57448
const SHOW = 57449
const DESCRIBE = 57450
const EXPLAIN = 57451
const DATE = 57452
const ESCAPE = 57453
const REPAIR = 57454
const OPTIMIZE = 57455
const TRUNCATE = 57456
const MAXVALUE = 57457
const PARTITION = 57458
const REORGANIZE = 57459
const LESS = 57460
const THAN = 57461
const PROCEDURE = 57462
const TRIGGER = 57463
const VINDEX = 57464
const VINDEXES = 57465
const BIT = 57466
const TINYINT = 57467
const SMALLINT = 57468
const MEDIUMINT = 57469
const INT = 57470
const INTEGER = 57471
const BIGINT = 57472
const INTNUM = 57473
const REAL = 57474
const DOUBLE = 57475
const FLOAT_TYPE = 57476
const DECIMAL = 57477
const NUMERIC = 57478
const TIME = 57479
const TIMESTAMP = 57480
const DATETIME = 57481
const YEAR = 57482
const CHAR = 57483
const VARCHAR = 57484
const BOOL = 57485
const CHARACTER = 57486
const VARBINARY = 57487
const NCHAR = 57488
const TEXT = 57489
const TINYTEXT = 57490
const MEDIUMTEXT = 57491
const LONGTEXT = 57492
const BLOB = 57493
const TINYBLOB = 57494
const MEDIUMBLOB = 57495
const LONGBLOB = 57496
const JSON = 57497
const ENUM = 57498
const NULLX = 57499
const AUTO_INCREMENT = 57500
const APPROXNUM = 57501
const SIGNED = 57502
const UNSIGNED = 57503
const ZEROFILL = 57504
const DATABASES = 57505
const TABLES = 57506
const VITESS_KEYSPACES = 57507
const VITESS_SHARDS = 57508
const VSCHEMA_TABLES = 57509
const NAMES = 57510
const CHARSET = 57511
const CURRENT_TIMESTAMP = 57512
const DATABASE = 57513
const CURRENT_DATE = 57514
const CURRENT_TIME = 57515
const LOCALTIME = 57516
const LOCALTIMESTAMP = 57517
const UTC_DATE = 57518
const UTC_TIME = 57519
const UTC_TIMESTAMP = 57520
const REPLACE = 57521
const CONVERT = 57522
const CAST = 57523
const GROUP_CONCAT = 57524
const SEPARATOR = 57525
const MATCH = 57526
const AGAINST = 57527
const BOOLEAN = 57528
const LANGUAGE = 57529
const WITH = 57530
const QUERY = 57531
const EXPANSION = 57532
const UNUSED = 57533

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 22,
	-2, 4,
	-1, 191,
	79, 586,
	108, 586,
	-2, 41,
	-1, 193,
	79, 609,
	108, 609,
	-2, 43,
	-1, 198,
	108, 487,
	-2, 483,
	-1, 199,
	108, 488,
	-2, 484,
	-1, 621,
	108, 490,
	-2, 486,
	-1, 762,
	5, 22,
	-2, 434,
	-1, 776,
	5, 23,
	-2, 311,
	-1, 950,
	5, 23,
	-2, 435,
	-1, 998,
	5, 22,
	-2, 437,
	-1, 1044,
	5, 23,
	-2, 438,
}

const yyPrivate = 57344

const yyLast = 7978

var yyAct = [...]int{

	366, 38, 1036, 868, 365, 548, 339, 891, 607, 190,
	624, 765, 647, 869, 956, 660, 415, 164, 418, 341,
	719, 926, 865, 839, 726, 416, 3, 831, 623, 743,
	780, 696, 230, 44, 633, 328, 801, 388, 768, 38,
	394, 620, 729, 158, 337, 334, 656, 169, 194, 586,
	201, 180, 184, 420, 404, 173, 43, 228, 1067, 1058,
	195, 1064, 1053, 1062, 163, 1057, 939, 991, 178, 326,
	205, 183, 1052, 1013, 179, 797, 221, 640, 159, 160,
	161, 162, 1039, 514, 513, 523, 524, 516, 517, 518,
	519, 520, 521, 522, 515, 968, 1019, 525, 648, 896,
	897, 898, 48, 199, 731, 986, 984, 1061, 899, 211,
	1059, 1037, 821, 587, 608, 610, 635, 212, 1011, 207,
	927, 131, 482, 50, 51, 52, 53, 477, 226, 63,
	130, 779, 131, 140, 818, 778, 140, 223, 208, 225,
	820, 777, 929, 203, 202, 142, 132, 227, 227, 227,
	227, 227, 227, 148, 635, 140, 140, 227, 222, 224,
	1029, 140, 537, 538, 560, 728, 905, 931, 976, 935,
	38, 930, 953, 928, 133, 134, 135, 156, 933, 843,
	784, 547, 791, 435, 216, 417, 609, 932, 515, 802,
	641, 525, 934, 936, 525, 391, 500, 434, 1040, 501,
	503, 390, 648, 941, 183, 227, 634, 744, 479, 220,
	227, 632, 631, 1012, 1010, 503, 906, 795, 1032, 227,
	227, 227, 227, 227, 227, 227, 227, 143, 1051, 900,
	819, 41, 817, 145, 140, 744, 140, 855, 150, 147,
	140, 699, 972, 637, 634, 214, 140, 430, 638, 489,
	63, 63, 63, 63, 63, 63, 396, 971, 487, 149,
	63, 720, 152, 721, 518, 519, 520, 521, 522, 515,
	331, 389, 525, 392, 502, 501, 319, 320, 321, 322,
	323, 140, 703, 144, 810, 325, 809, 798, 140, 140,
	140, 503, 1046, 63, 502, 501, 701, 702, 700, 575,
	576, 943, 146, 151, 153, 154, 155, 1022, 63, 970,
	140, 503, 140, 63, 808, 140, 1048, 327, 140, 327,
	140, 904, 63, 63, 63, 63, 63, 63, 63, 63,
	689, 691, 692, 476, 893, 690, 534, 536, 481, 849,
	792, 848, 1002, 327, 1015, 502, 501, 490, 491, 492,
	493, 494, 495, 496, 497, 722, 535, 502, 501, 475,
	505, 218, 503, 213, 546, 202, 850, 550, 551, 552,
	553, 554, 555, 556, 503, 559, 561, 561, 561, 561,
	561, 561, 561, 561, 569, 570, 571, 572, 539, 540,
	541, 542, 543, 544, 545, 1014, 504, 824, 825, 826,
	1002, 1003, 184, 184, 184, 184, 184, 195, 577, 901,
	589, 432, 502, 501, 502, 501, 965, 964, 417, 734,
	611, 183, 183, 183, 183, 183, 184, 866, 140, 503,
	432, 503, 885, 327, 952, 327, 948, 183, 506, 195,
	837, 327, 614, 606, 45, 183, 911, 910, 579, 908,
	907, 734, 327, 864, 591, 592, 401, 594, 401, 327,
	427, 578, 649, 650, 651, 19, 19, 602, 621, 437,
	436, 549, 363, 616, 613, 612, 590, 909, 558, 593,
	766, 617, 766, 837, 837, 604, 605, 227, 628, 760,
	662, 997, 761, 619, 625, 785, 837, 63, 61, 400,
	573, 428, 140, 426, 19, 140, 140, 140, 140, 140,
	41, 41, 41, 697, 642, 661, 879, 140, 658, 659,
	788, 140, 401, 401, 432, 140, 196, 657, 698, 140,
	140, 769, 770, 170, 652, 55, 664, 38, 895, 618,
	63, 562, 563, 564, 565, 566, 567, 568, 129, 866,
	41, 550, 811, 695, 772, 485, 704, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 406, 409, 410, 411, 407, 606, 408, 412, 41,
	621, 140, 723, 724, 324, 585, 140, 763, 764, 140,
	63, 599, 17, 597, 775, 748, 600, 741, 598, 177,
	601, 774, 410, 411, 596, 733, 686, 687, 595, 693,
	694, 751, 762, 752, 1060, 684, 174, 175, 735, 229,
	229, 229, 229, 229, 229, 782, 783, 1056, 823, 229,
	685, 746, 773, 395, 786, 643, 644, 645, 646, 168,
	1055, 757, 756, 974, 803, 433, 219, 393, 329, 63,
	653, 654, 655, 794, 1034, 549, 799, 800, 738, 739,
	330, 1033, 229, 63, 995, 789, 227, 790, 946, 666,
	354, 353, 356, 357, 358, 359, 776, 229, 389, 355,
	360, 625, 229, 484, 227, 414, 804, 805, 806, 171,
	172, 229, 229, 229, 229, 229, 229, 229, 229, 395,
	755, 165, 1025, 166, 1024, 697, 45, 994, 754, 766,
	1026, 814, 969, 499, 47, 63, 49, 736, 737, 425,
	698, 740, 42, 1, 669, 1035, 890, 63, 630, 622,
	200, 54, 827, 629, 844, 747, 807, 749, 750, 1009,
	967, 636, 796, 639, 894, 1031, 793, 828, 829, 830,
	758, 523, 524, 516, 517, 518, 519, 520, 521, 522,
	515, 440, 871, 525, 38, 441, 870, 195, 63, 63,
	867, 439, 854, 443, 442, 438, 413, 429, 881, 882,
	883, 838, 663, 56, 816, 815, 667, 63, 206, 872,
	533, 753, 834, 189, 813, 875, 835, 873, 889, 876,
	574, 387, 1023, 993, 853, 557, 846, 847, 742, 340,
	851, 688, 822, 352, 888, 857, 886, 858, 859, 860,
	861, 513, 523, 524, 516, 517, 518, 519, 520, 521,
	522, 515, 349, 351, 525, 63, 902, 903, 350, 845,
	580, 759, 887, 625, 507, 625, 338, 332, 182, 856,
	884, 397, 405, 403, 402, 187, 916, 140, 771, 767,
	914, 181, 863, 990, 922, 184, 581, 63, 63, 925,
	937, 877, 938, 196, 878, 944, 621, 880, 918, 919,
	921, 945, 1038, 584, 183, 924, 940, 20, 63, 63,
	947, 63, 63, 836, 955, 46, 958, 959, 960, 786,
	176, 733, 16, 961, 963, 196, 920, 852, 229, 229,
	15, 14, 13, 227, 24, 140, 12, 11, 10, 140,
	9, 8, 7, 6, 5, 63, 516, 517, 518, 519,
	520, 521, 522, 515, 4, 167, 525, 18, 2, 0,
	989, 949, 950, 951, 63, 954, 625, 982, 0, 871,
	0, 0, 999, 870, 0, 0, 0, 0, 0, 229,
	942, 0, 996, 975, 0, 0, 0, 0, 140, 0,
	1007, 0, 0, 1008, 0, 1016, 549, 998, 0, 0,
	0, 0, 0, 63, 0, 63, 63, 63, 140, 63,
	0, 0, 63, 1018, 0, 977, 978, 0, 871, 0,
	38, 1027, 870, 0, 0, 0, 0, 987, 988, 0,
	0, 0, 0, 0, 364, 0, 63, 0, 725, 0,
	229, 0, 0, 0, 0, 1028, 0, 0, 1004, 1005,
	1006, 1042, 745, 195, 887, 1020, 1043, 0, 0, 0,
	0, 973, 0, 0, 138, 0, 0, 157, 992, 0,
	0, 1054, 0, 0, 0, 0, 63, 63, 0, 0,
	1021, 676, 1063, 0, 0, 0, 138, 138, 197, 63,
	0, 0, 138, 0, 0, 674, 0, 0, 0, 0,
	63, 0, 0, 966, 781, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 229, 185, 1044, 0,
	0, 0, 680, 0, 0, 1047, 63, 0, 1050, 1065,
	0, 673, 0, 0, 0, 0, 0, 0, 979, 980,
	0, 981, 0, 0, 983, 0, 985, 137, 0, 1041,
	549, 0, 0, 63, 0, 1068, 1069, 812, 229, 0,
	0, 63, 0, 0, 0, 138, 0, 138, 0, 0,
	188, 138, 0, 0, 0, 204, 229, 138, 0, 670,
	675, 668, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 19, 39, 21, 22, 0, 0, 0, 0,
	678, 681, 0, 0, 0, 0, 0, 0, 0, 0,
	33, 0, 138, 0, 0, 23, 0, 0, 0, 138,
	422, 138, 0, 0, 841, 0, 0, 0, 672, 406,
	409, 410, 411, 407, 32, 408, 412, 0, 41, 769,
	770, 138, 671, 138, 0, 0, 138, 0, 209, 138,
	210, 488, 0, 196, 215, 0, 874, 781, 0, 0,
	217, 0, 0, 0, 677, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 679, 0, 229, 229, 0,
	229, 892, 514, 513, 523, 524, 516, 517, 518, 519,
	520, 521, 522, 515, 0, 399, 525, 25, 26, 28,
	27, 30, 0, 446, 424, 0, 0, 0, 0, 0,
	31, 34, 35, 0, 915, 36, 37, 29, 0, 0,
	832, 0, 0, 0, 478, 458, 480, 0, 0, 483,
	0, 0, 486, 841, 0, 0, 229, 0, 0, 463,
	464, 465, 466, 467, 468, 469, 0, 470, 471, 472,
	473, 474, 459, 460, 461, 462, 444, 445, 0, 138,
	447, 0, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 457, 957, 0, 957, 957, 957, 0, 962, 0,
	0, 229, 40, 0, 0, 0, 0, 0, 0, 0,
	509, 0, 512, 0, 0, 0, 0, 0, 526, 527,
	528, 529, 530, 531, 532, 229, 510, 511, 508, 514,
	513, 523, 524, 516, 517, 518, 519, 520, 521, 522,
	515, 0, 0, 525, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 197, 138, 138, 138, 138,
	138, 327, 498, 0, 0, 1000, 1001, 0, 603, 0,
	0, 0, 138, 0, 0, 0, 422, 0, 892, 0,
	138, 138, 0, 0, 0, 0, 0, 197, 0, 229,
	488, 0, 0, 0, 0, 0, 917, 514, 513, 523,
	524, 516, 517, 518, 519, 520, 521, 522, 515, 0,
	0, 525, 0, 0, 0, 1030, 514, 513, 523, 524,
	516, 517, 518, 519, 520, 521, 522, 515, 0, 0,
	525, 833, 138, 0, 0, 0, 588, 138, 0, 196,
	138, 0, 1045, 0, 0, 0, 0, 0, 0, 0,
	1049, 514, 513, 523, 524, 516, 517, 518, 519, 520,
	521, 522, 515, 0, 615, 525, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 84, 0, 86, 0, 0, 106, 93, 0, 514,
	513, 523, 524, 516, 517, 518, 519, 520, 521, 522,
	515, 732, 488, 525, 0, 62, 732, 732, 0, 0,
	732, 0, 0, 0, 72, 665, 0, 0, 0, 0,
	682, 0, 0, 683, 732, 732, 732, 732, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 732,
	514, 513, 523, 524, 516, 517, 518, 519, 520, 521,
	522, 515, 0, 0, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 100, 0, 0, 0, 73, 0, 105,
	98, 0, 0, 99, 104, 87, 110, 101, 116, 121,
	122, 66, 114, 108, 91, 81, 82, 65, 0, 103,
	76, 80, 75, 96, 111, 112, 74, 127, 69, 120,
	68, 70, 119, 95, 109, 115, 92, 89, 67, 113,
	90, 88, 83, 78, 0, 0, 0, 107, 117, 128,
	0, 0, 123, 124, 125, 94, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 85, 126, 102, 79, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 732, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 732, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 197, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 862, 732, 0, 0, 0, 0, 0, 488, 732,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 422,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 912,
	0, 0, 0, 913, 0, 308, 298, 271, 310, 249,
	263, 318, 264, 265, 292, 237, 279, 97, 261, 0,
	252, 232, 258, 233, 250, 273, 77, 276, 248, 300,
	282, 84, 316, 86, 287, 0, 106, 93, 0, 0,
	275, 302, 277, 297, 270, 293, 242, 286, 311, 262,
	290, 312, 0, 0, 0, 62, 0, 626, 627, 0,
	0, 0, 0, 0, 72, 0, 289, 307, 260, 291,
	231, 288, 0, 235, 238, 317, 305, 255, 256, 787,
	0, 0, 0, 0, 0, 0, 274, 278, 294, 268,
	0, 0, 0, 0, 0, 0, 0, 0, 253, 0,
	285, 0, 0, 0, 239, 236, 0, 272, 0, 0,
	0, 241, 0, 254, 295, 0, 303, 269, 141, 306,
	267, 266, 309, 100, 301, 251, 259, 73, 257, 105,
	98, 197, 284, 99, 104, 87, 110, 101, 116, 121,
	122, 66, 114, 108, 91, 81, 82, 65, 0, 103,
	76, 80, 75, 96, 111, 112, 74, 127, 69, 120,
	68, 70, 119, 95, 109, 115, 92, 89, 67, 113,
	90, 88, 83, 78, 0, 234, 0, 107, 117, 128,
	247, 304, 123, 124, 125, 94, 71, 245, 246, 243,
	244, 280, 281, 313, 314, 315, 296, 240, 0, 0,
	299, 283, 64, 0, 85, 126, 102, 79, 118, 308,
	298, 271, 310, 249, 263, 318, 264, 265, 292, 237,
	279, 97, 261, 0, 252, 232, 258, 233, 250, 273,
	77, 276, 248, 300, 282, 84, 316, 86, 287, 0,
	106, 93, 0, 0, 275, 302, 277, 297, 270, 293,
	242, 286, 311, 262, 290, 312, 0, 0, 0, 62,
	0, 626, 627, 0, 0, 0, 0, 0, 72, 0,
	289, 307, 260, 291, 231, 288, 0, 235, 238, 317,
	305, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	274, 278, 294, 268, 0, 0, 0, 0, 0, 0,
	0, 0, 253, 0, 285, 0, 0, 0, 239, 236,
	0, 272, 0, 0, 0, 241, 0, 254, 295, 0,
	303, 269, 141, 306, 267, 266, 309, 100, 301, 251,
	259, 73, 257, 105, 98, 0, 284, 99, 104, 87,
	110, 101, 116, 121, 122, 66, 114, 108, 91, 81,
	82, 65, 0, 103, 76, 80, 75, 96, 111, 112,
	74, 127, 69, 120, 68, 70, 119, 95, 109, 115,
	92, 89, 67, 113, 90, 88, 83, 78, 0, 234,
	0, 107, 117, 128, 247, 304, 123, 124, 125, 94,
	71, 245, 246, 243, 244, 280, 281, 313, 314, 315,
	296, 240, 0, 0, 299, 283, 64, 0, 85, 126,
	102, 79, 118, 308, 298, 271, 310, 249, 263, 318,
	264, 265, 292, 237, 279, 97, 261, 0, 252, 232,
	258, 233, 250, 273, 77, 276, 248, 300, 282, 84,
	316, 86, 287, 0, 106, 93, 0, 0, 275, 302,
	277, 297, 270, 293, 242, 286, 311, 262, 290, 312,
	0, 0, 0, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 289, 307, 260, 291, 231, 288,
	0, 235, 238, 317, 305, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 274, 278, 294, 268, 0, 0,
	0, 0, 0, 0, 1017, 0, 253, 0, 285, 0,
	0, 0, 239, 236, 0, 272, 0, 0, 0, 241,
	0, 254, 295, 0, 303, 269, 141, 306, 267, 266,
	309, 100, 301, 251, 259, 73, 257, 105, 98, 0,
	284, 99, 104, 87, 110, 101, 116, 121, 122, 66,
	114, 108, 91, 81, 82, 65, 0, 103, 76, 80,
	75, 96, 111, 112, 74, 127, 69, 120, 68, 70,
	119, 95, 109, 115, 92, 89, 67, 113, 90, 88,
	83, 78, 0, 234, 0, 107, 117, 128, 247, 304,
	123, 124, 125, 94, 71, 245, 246, 243, 244, 280,
	281, 313, 314, 315, 296, 240, 0, 0, 299, 283,
	64, 0, 85, 126, 102, 79, 118, 308, 298, 271,
	310, 249, 263, 318, 264, 265, 292, 237, 279, 97,
	261, 0, 252, 232, 258, 233, 250, 273, 77, 276,
	248, 300, 282, 84, 316, 86, 287, 0, 106, 93,
	0, 0, 275, 302, 277, 297, 270, 293, 242, 286,
	311, 262, 290, 312, 41, 0, 0, 62, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 289, 307,
	260, 291, 231, 288, 0, 235, 238, 317, 305, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 274, 278,
	294, 268, 0, 0, 0, 0, 0, 0, 0, 0,
	253, 0, 285, 0, 0, 0, 239, 236, 0, 272,
	0, 0, 0, 241, 0, 254, 295, 0, 303, 269,
	141, 306, 267, 266, 309, 100, 301, 251, 259, 73,
	257, 105, 98, 0, 284, 99, 104, 87, 110, 101,
	116, 121, 122, 66, 114, 108, 91, 81, 82, 65,
	0, 103, 76, 80, 75, 96, 111, 112, 74, 127,
	69, 120, 68, 70, 119, 95, 109, 115, 92, 89,
	67, 113, 90, 88, 83, 78, 0, 234, 0, 107,
	117, 128, 247, 304, 123, 124, 125, 94, 71, 245,
	246, 243, 244, 280, 281, 313, 314, 315, 296, 240,
	0, 0, 299, 283, 64, 0, 85, 126, 102, 79,
	118, 308, 298, 271, 310, 249, 263, 318, 264, 265,
	292, 237, 279, 97, 261, 0, 252, 232, 258, 233,
	250, 273, 77, 276, 248, 300, 282, 84, 316, 86,
	287, 0, 106, 93, 0, 0, 275, 302, 277, 297,
	270, 293, 242, 286, 311, 262, 290, 312, 0, 0,
	0, 198, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 289, 307, 260, 291, 231, 288, 0, 235,
	238, 317, 305, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 274, 278, 294, 268, 0, 0, 0, 0,
	0, 0, 923, 0, 253, 0, 285, 0, 0, 0,
	239, 236, 0, 272, 0, 0, 0, 241, 0, 254,
	295, 0, 303, 269, 141, 306, 267, 266, 309, 100,
	301, 251, 259, 73, 257, 105, 98, 0, 284, 99,
	104, 87, 110, 101, 116, 121, 122, 66, 114, 108,
	91, 81, 82, 65, 0, 103, 76, 80, 75, 96,
	111, 112, 74, 127, 69, 120, 68, 70, 119, 95,
	109, 115, 92, 89, 67, 113, 90, 88, 83, 78,
	0, 234, 0, 107, 117, 128, 247, 304, 123, 124,
	125, 94, 71, 245, 246, 243, 244, 280, 281, 313,
	314, 315, 296, 240, 0, 0, 299, 283, 64, 0,
	85, 126, 102, 79, 118, 308, 298, 271, 310, 249,
	263, 318, 264, 265, 292, 237, 279, 97, 261, 0,
	252, 232, 258, 233, 250, 273, 77, 276, 248, 300,
	282, 84, 316, 86, 287, 0, 106, 93, 0, 0,
	275, 302, 277, 297, 270, 293, 242, 286, 311, 262,
	290, 312, 0, 0, 0, 62, 0, 431, 0, 0,
	0, 0, 0, 0, 72, 0, 289, 307, 260, 291,
	231, 288, 0, 235, 238, 317, 305, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 274, 278, 294, 268,
	0, 0, 0, 0, 0, 0, 0, 0, 253, 0,
	285, 0, 0, 0, 239, 236, 0, 272, 0, 0,
	0, 241, 0, 254, 295, 0, 303, 269, 141, 306,
	267, 266, 309, 100, 301, 251, 259, 73, 257, 105,
	98, 0, 284, 99, 104, 87, 110, 101, 116, 121,
	122, 66, 114, 108, 91, 81, 82, 65, 0, 103,
	76, 80, 75, 96, 111, 112, 74, 127, 69, 120,
	68, 70, 119, 95, 109, 115, 92, 89, 67, 113,
	90, 88, 83, 78, 0, 234, 0, 107, 117, 128,
	247, 304, 123, 124, 125, 94, 71, 245, 246, 243,
	244, 280, 281, 313, 314, 315, 296, 240, 0, 0,
	299, 283, 64, 0, 85, 126, 102, 79, 118, 308,
	298, 271, 310, 249, 263, 318, 264, 265, 292, 237,
	279, 97, 261, 0, 252, 232, 258, 233, 250, 273,
	77, 276, 248, 300, 282, 84, 316, 86, 287, 0,
	106, 93, 0, 0, 275, 302, 277, 297, 270, 293,
	242, 286, 311, 262, 290, 312, 0, 0, 0, 62,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	289, 307, 260, 291, 231, 288, 0, 235, 238, 317,
	305, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	274, 278, 294, 268, 0, 0, 0, 0, 0, 0,
	0, 0, 253, 0, 285, 0, 0, 0, 239, 236,
	0, 272, 0, 0, 0, 241, 0, 254, 295, 0,
	303, 269, 141, 306, 267, 266, 309, 100, 301, 251,
	259, 73, 257, 105, 98, 0, 284, 99, 104, 87,
	110, 101, 116, 121, 122, 66, 114, 108, 91, 81,
	82, 65, 0, 103, 76, 80, 75, 96, 111, 112,
	74, 127, 69, 120, 68, 70, 119, 95, 109, 115,
	92, 89, 67, 113, 90, 88, 83, 78, 0, 234,
	0, 107, 117, 128, 247, 304, 123, 124, 125, 94,
	71, 245, 246, 243, 244, 280, 281, 313, 314, 315,
	296, 240, 0, 0, 299, 283, 64, 0, 85, 126,
	102, 79, 118, 308, 298, 271, 310, 249, 263, 318,
	264, 265, 292, 237, 279, 97, 261, 0, 252, 232,
	258, 233, 250, 273, 77, 276, 248, 300, 282, 84,
	316, 86, 287, 0, 106, 93, 0, 0, 275, 302,
	277, 297, 270, 293, 242, 286, 311, 262, 290, 312,
	0, 0, 0, 198, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 289, 307, 260, 291, 231, 288,
	0, 235, 238, 317, 305, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 274, 278, 294, 268, 0, 0,
	0, 0, 0, 0, 0, 0, 253, 0, 285, 0,
	0, 0, 239, 236, 0, 272, 0, 0, 0, 241,
	0, 254, 295, 0, 303, 269, 141, 306, 267, 266,
	309, 100, 301, 251, 259, 73, 257, 105, 98, 0,
	284, 99, 104, 87, 110, 101, 116, 121, 122, 66,
	114, 108, 91, 81, 82, 65, 0, 103, 76, 80,
	75, 96, 111, 112, 74, 127, 69, 120, 68, 70,
	119, 95, 109, 115, 92, 89, 67, 113, 90, 88,
	83, 78, 0, 234, 0, 107, 117, 128, 247, 304,
	123, 124, 125, 94, 71, 245, 246, 243, 244, 280,
	281, 313, 314, 315, 296, 240, 0, 0, 299, 283,
	64, 0, 85, 126, 102, 79, 118, 308, 298, 271,
	310, 249, 263, 318, 264, 265, 292, 237, 279, 97,
	261, 0, 252, 232, 258, 233, 250, 273, 77, 276,
	248, 300, 282, 84, 316, 86, 287, 0, 106, 93,
	0, 0, 275, 302, 277, 297, 270, 293, 242, 286,
	311, 262, 290, 312, 0, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 289, 307,
	260, 291, 231, 288, 0, 235, 238, 317, 305, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 274, 278,
	294, 268, 0, 0, 0, 0, 0, 0, 0, 0,
	253, 0, 285, 0, 0, 0, 239, 236, 0, 272,
	0, 0, 0, 241, 0, 254, 295, 0, 303, 269,
	141, 306, 267, 266, 309, 100, 301, 251, 259, 73,
	257, 105, 98, 0, 284, 99, 104, 87, 110, 101,
	116, 121, 122, 66, 114, 108, 91, 81, 82, 65,
	0, 103, 76, 80, 75, 96, 111, 112, 74, 127,
	69, 120, 68, 70, 119, 95, 109, 115, 92, 89,
	67, 113, 90, 88, 83, 78, 0, 234, 0, 107,
	117, 128, 247, 304, 123, 124, 125, 94, 71, 245,
	246, 243, 244, 280, 281, 313, 314, 315, 296, 240,
	0, 0, 299, 283, 64, 0, 85, 126, 102, 79,
	118, 97, 0, 0, 727, 0, 336, 0, 0, 0,
	77, 0, 335, 0, 0, 84, 374, 86, 0, 0,
	106, 93, 0, 0, 0, 0, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 198,
	354, 353, 356, 357, 358, 359, 0, 0, 72, 355,
	360, 361, 362, 0, 0, 333, 347, 0, 373, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 344, 345,
	730, 0, 0, 0, 385, 0, 346, 0, 0, 342,
	343, 348, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 383, 0, 100, 0, 0,
	0, 73, 0, 105, 98, 0, 0, 99, 104, 87,
	110, 101, 116, 121, 122, 66, 114, 108, 91, 81,
	82, 65, 0, 103, 76, 80, 75, 96, 111, 112,
	74, 127, 69, 120, 68, 70, 119, 95, 109, 115,
	92, 89, 67, 113, 90, 88, 83, 78, 0, 0,
	0, 107, 117, 128, 0, 0, 123, 124, 125, 94,
	71, 375, 384, 381, 382, 379, 380, 378, 377, 376,
	386, 369, 370, 372, 0, 371, 64, 0, 85, 126,
	102, 79, 118, 97, 0, 0, 0, 0, 336, 0,
	0, 0, 77, 0, 335, 0, 0, 84, 374, 86,
	0, 0, 106, 93, 0, 0, 0, 0, 367, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 0,
	327, 198, 354, 353, 356, 357, 358, 359, 0, 0,
	72, 355, 360, 361, 362, 0, 0, 333, 347, 0,
	373, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	344, 345, 0, 0, 0, 0, 385, 0, 346, 0,
	0, 342, 343, 348, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 383, 0, 100,
	0, 0, 0, 73, 0, 105, 98, 0, 0, 99,
	104, 87, 110, 101, 116, 121, 122, 66, 114, 108,
	91, 81, 82, 65, 0, 103, 76, 80, 75, 96,
	111, 112, 74, 127, 69, 120, 68, 70, 119, 95,
	109, 115, 92, 89, 67, 113, 90, 88, 83, 78,
	0, 0, 0, 107, 117, 128, 0, 0, 123, 124,
	125, 94, 71, 375, 384, 381, 382, 379, 380, 378,
	377, 376, 386, 369, 370, 372, 0, 371, 64, 0,
	85, 126, 102, 79, 118, 97, 0, 0, 0, 0,
	336, 0, 0, 0, 77, 0, 335, 0, 0, 84,
	374, 86, 0, 0, 106, 93, 0, 0, 0, 0,
	367, 368, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 0, 0, 198, 354, 353, 356, 357, 358, 359,
	0, 0, 72, 355, 360, 361, 362, 0, 0, 333,
	347, 0, 373, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 344, 345, 730, 0, 0, 0, 385, 0,
	346, 0, 0, 342, 343, 348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 383,
	0, 100, 0, 0, 0, 73, 0, 105, 98, 0,
	0, 99, 104, 87, 110, 101, 116, 121, 122, 66,
	114, 108, 91, 81, 82, 65, 0, 103, 76, 80,
	75, 96, 111, 112, 74, 127, 69, 120, 68, 70,
	119, 95, 109, 115, 92, 89, 67, 113, 90, 88,
	83, 78, 0, 0, 0, 107, 117, 128, 0, 0,
	123, 124, 125, 94, 71, 375, 384, 381, 382, 379,
	380, 378, 377, 376, 386, 369, 370, 372, 19, 371,
	64, 0, 85, 126, 102, 79, 118, 0, 0, 97,
	0, 0, 0, 0, 336, 0, 0, 0, 77, 0,
	335, 0, 0, 84, 374, 86, 0, 0, 106, 93,
	0, 0, 0, 0, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 0, 41, 0, 0, 198, 354, 353,
	356, 357, 358, 359, 0, 0, 72, 355, 360, 361,
	362, 0, 0, 333, 347, 0, 373, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 344, 345, 0, 0,
	0, 0, 385, 0, 346, 0, 0, 342, 343, 348,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 383, 0, 100, 0, 0, 0, 73,
	0, 105, 98, 0, 0, 99, 104, 87, 110, 101,
	116, 121, 122, 66, 114, 108, 91, 81, 82, 65,
	0, 103, 76, 80, 75, 96, 111, 112, 74, 127,
	69, 120, 68, 70, 119, 95, 109, 115, 92, 89,
	67, 113, 90, 88, 83, 78, 0, 0, 0, 107,
	117, 128, 0, 0, 123, 124, 125, 94, 71, 375,
	384, 381, 382, 379, 380, 378, 377, 376, 386, 369,
	370, 372, 0, 371, 64, 0, 85, 126, 102, 79,
	118, 97, 0, 0, 0, 0, 336, 0, 0, 0,
	77, 0, 335, 0, 0, 84, 374, 86, 0, 0,
	106, 93, 0, 0, 0, 0, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 198,
	354, 353, 356, 357, 358, 359, 0, 0, 72, 355,
	360, 361, 362, 0, 0, 333, 347, 0, 373, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 344, 345,
	0, 0, 0, 0, 385, 0, 346, 0, 0, 342,
	343, 348, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 383, 0, 100, 0, 0,
	0, 73, 0, 105, 98, 0, 0, 99, 104, 87,
	110, 101, 116, 121, 122, 66, 114, 108, 91, 81,
	82, 65, 0, 103, 76, 80, 75, 96, 111, 112,
	74, 127, 69, 120, 68, 70, 119, 95, 109, 115,
	92, 89, 67, 113, 90, 88, 83, 78, 0, 0,
	0, 107, 117, 128, 0, 0, 123, 124, 125, 94,
	71, 375, 384, 381, 382, 379, 380, 378, 377, 376,
	386, 369, 370, 372, 97, 371, 64, 0, 85, 126,
	102, 79, 118, 77, 0, 0, 0, 0, 84, 374,
	86, 0, 0, 106, 93, 0, 0, 0, 0, 367,
	368, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 198, 354, 353, 356, 357, 358, 359, 0,
	0, 72, 355, 360, 361, 362, 0, 0, 0, 347,
	0, 373, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 344, 345, 0, 0, 0, 0, 385, 0, 346,
	0, 0, 342, 343, 348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 383, 0,
	100, 0, 0, 0, 73, 0, 105, 98, 0, 1066,
	99, 104, 87, 110, 101, 116, 121, 122, 66, 114,
	108, 91, 81, 82, 65, 0, 103, 76, 80, 75,
	96, 111, 112, 74, 127, 69, 120, 68, 70, 119,
	95, 109, 115, 92, 89, 67, 113, 90, 88, 83,
	78, 0, 0, 0, 107, 117, 128, 0, 0, 123,
	124, 125, 94, 71, 375, 384, 381, 382, 379, 380,
	378, 377, 376, 386, 369, 370, 372, 97, 371, 64,
	0, 85, 126, 102, 79, 118, 77, 0, 0, 0,
	0, 84, 374, 86, 0, 0, 106, 93, 0, 0,
	0, 0, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 198, 354, 353, 356, 357,
	358, 359, 0, 0, 72, 355, 360, 361, 362, 0,
	0, 0, 347, 0, 373, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 344, 345, 0, 0, 0, 0,
	385, 0, 346, 0, 0, 342, 343, 348, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 383, 0, 100, 0, 0, 0, 73, 0, 105,
	98, 0, 0, 99, 104, 87, 110, 101, 116, 121,
	122, 66, 114, 108, 91, 81, 82, 65, 0, 103,
	76, 80, 75, 96, 111, 112, 74, 127, 69, 120,
	68, 70, 119, 95, 109, 115, 92, 89, 67, 113,
	90, 88, 83, 78, 0, 0, 0, 107, 117, 128,
	0, 0, 123, 124, 125, 94, 71, 375, 384, 381,
	382, 379, 380, 378, 377, 376, 386, 369, 370, 372,
	0, 371, 64, 0, 85, 126, 102, 79, 118, 97,
	0, 0, 0, 840, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 84, 0, 86, 0, 0, 106, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 842,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 100, 0, 0, 0, 73,
	0, 105, 98, 0, 0, 99, 104, 87, 110, 101,
	116, 121, 122, 66, 114, 108, 91, 81, 82, 65,
	0, 103, 76, 80, 75, 96, 111, 112, 74, 127,
	69, 120, 68, 70, 119, 95, 109, 115, 92, 89,
	67, 113, 90, 88, 83, 78, 0, 0, 0, 107,
	117, 128, 97, 0, 123, 124, 125, 94, 71, 0,
	0, 77, 0, 0, 0, 0, 84, 0, 86, 0,
	0, 106, 93, 0, 64, 0, 85, 126, 102, 79,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 57, 0, 0, 0, 60, 100, 0,
	0, 0, 73, 0, 105, 98, 0, 0, 99, 104,
	87, 110, 101, 116, 121, 122, 66, 114, 108, 91,
	81, 82, 65, 0, 103, 76, 80, 75, 96, 111,
	112, 74, 127, 69, 120, 68, 70, 119, 95, 109,
	115, 92, 89, 67, 113, 90, 88, 83, 78, 0,
	0, 0, 107, 117, 128, 0, 0, 123, 124, 125,
	94, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 85,
	126, 102, 79, 118, 97, 0, 0, 0, 421, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 84, 0,
	86, 0, 0, 106, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 423, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	100, 0, 0, 0, 73, 0, 105, 98, 0, 0,
	99, 104, 87, 110, 101, 116, 121, 122, 66, 114,
	108, 91, 81, 82, 65, 0, 103, 76, 80, 75,
	96, 111, 112, 74, 127, 69, 120, 68, 70, 119,
	95, 109, 115, 92, 89, 67, 113, 90, 88, 83,
	78, 0, 0, 0, 107, 117, 128, 0, 0, 123,
	124, 125, 94, 71, 0, 0, 19, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 64,
	0, 85, 126, 102, 79, 118, 77, 0, 0, 0,
	0, 84, 0, 86, 0, 0, 106, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 100, 0, 0, 0, 73, 0, 105,
	98, 0, 0, 99, 104, 87, 110, 101, 116, 121,
	122, 66, 114, 108, 91, 81, 82, 65, 0, 103,
	76, 80, 75, 96, 111, 112, 74, 127, 69, 120,
	68, 70, 119, 95, 109, 115, 92, 89, 67, 113,
	90, 88, 83, 78, 0, 0, 0, 107, 117, 128,
	0, 0, 123, 124, 125, 94, 71, 0, 0, 19,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 64, 0, 85, 126, 102, 79, 118, 77,
	0, 0, 0, 0, 84, 0, 86, 0, 0, 106,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 41, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 100, 0, 0, 0,
	73, 0, 105, 98, 0, 0, 99, 104, 87, 110,
	101, 116, 121, 122, 66, 114, 108, 91, 81, 82,
	65, 0, 103, 76, 80, 75, 96, 111, 112, 74,
	127, 69, 120, 68, 70, 119, 95, 109, 115, 92,
	89, 67, 113, 90, 88, 83, 78, 0, 0, 0,
	107, 117, 128, 97, 0, 123, 124, 125, 94, 71,
	0, 0, 77, 0, 0, 0, 0, 84, 0, 86,
	0, 0, 106, 93, 0, 64, 0, 85, 126, 102,
	79, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 62, 0, 0, 582, 0, 0, 583, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 100,
	0, 0, 0, 73, 0, 105, 98, 0, 0, 99,
	104, 87, 110, 101, 116, 121, 122, 66, 114, 108,
	91, 81, 82, 65, 0, 103, 76, 80, 75, 96,
	111, 112, 74, 127, 69, 120, 68, 70, 119, 95,
	109, 115, 92, 89, 67, 113, 90, 88, 83, 78,
	0, 0, 0, 107, 117, 128, 0, 0, 123, 124,
	125, 94, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
	85, 126, 102, 79, 118, 97, 0, 0, 0, 421,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 84,
	0, 86, 0, 0, 106, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 423, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 100, 0, 0, 0, 73, 0, 105, 98, 0,
	0, 419, 104, 87, 110, 101, 116, 121, 122, 66,
	114, 108, 91, 81, 82, 65, 0, 103, 76, 80,
	75, 96, 111, 112, 74, 127, 69, 120, 68, 70,
	119, 95, 109, 115, 92, 89, 67, 113, 90, 88,
	83, 78, 0, 0, 0, 107, 117, 128, 97, 0,
	123, 124, 125, 94, 71, 0, 0, 77, 0, 0,
	0, 0, 84, 0, 86, 0, 0, 106, 93, 0,
	64, 0, 85, 126, 102, 79, 118, 0, 0, 0,
	0, 0, 0, 41, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 100, 0, 0, 0, 73, 0,
	105, 98, 0, 0, 99, 104, 87, 110, 101, 116,
	121, 122, 66, 114, 108, 91, 81, 82, 65, 0,
	103, 76, 80, 75, 96, 111, 112, 74, 127, 69,
	120, 68, 70, 119, 95, 109, 115, 92, 89, 67,
	113, 90, 88, 83, 78, 0, 0, 0, 107, 117,
	128, 97, 0, 123, 124, 125, 94, 71, 0, 0,
	77, 0, 0, 0, 0, 84, 0, 86, 0, 0,
	106, 93, 0, 64, 0, 85, 126, 102, 79, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 842, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 100, 0, 0,
	0, 73, 0, 105, 98, 0, 0, 99, 104, 87,
	110, 101, 116, 121, 122, 66, 114, 108, 91, 81,
	82, 65, 0, 103, 76, 80, 75, 96, 111, 112,
	74, 127, 69, 120, 68, 70, 119, 95, 109, 115,
	92, 89, 67, 113, 90, 88, 83, 78, 0, 0,
	0, 107, 117, 128, 97, 0, 123, 124, 125, 94,
	71, 0, 0, 77, 0, 0, 0, 0, 84, 0,
	86, 0, 0, 106, 93, 0, 64, 0, 85, 126,
	102, 79, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 423, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	100, 0, 0, 0, 73, 0, 105, 98, 0, 0,
	99, 104, 87, 110, 101, 116, 121, 122, 66, 114,
	108, 91, 81, 82, 65, 0, 103, 76, 80, 75,
	96, 111, 112, 74, 127, 69, 120, 68, 70, 119,
	95, 109, 115, 92, 89, 67, 113, 90, 88, 83,
	78, 0, 0, 0, 107, 117, 128, 97, 0, 123,
	124, 125, 94, 71, 0, 398, 77, 0, 0, 0,
	0, 84, 0, 86, 0, 0, 106, 93, 0, 64,
	0, 85, 126, 102, 79, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 100, 0, 0, 0, 73, 0, 105,
	98, 0, 0, 99, 104, 87, 110, 101, 116, 121,
	122, 66, 114, 108, 91, 81, 82, 65, 0, 103,
	76, 80, 75, 96, 111, 112, 74, 127, 69, 120,
	68, 70, 119, 95, 109, 115, 92, 89, 67, 113,
	90, 88, 83, 78, 186, 0, 0, 107, 117, 128,
	0, 97, 123, 124, 125, 94, 71, 0, 0, 0,
	77, 0, 0, 0, 0, 84, 0, 86, 0, 0,
	106, 93, 64, 0, 85, 126, 102, 79, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 100, 0, 0,
	0, 73, 0, 105, 98, 0, 0, 99, 104, 87,
	110, 101, 116, 121, 122, 66, 114, 108, 91, 81,
	82, 65, 0, 103, 76, 80, 75, 96, 111, 112,
	74, 127, 69, 120, 68, 70, 119, 95, 109, 115,
	92, 89, 67, 113, 90, 88, 83, 78, 0, 0,
	0, 107, 117, 128, 97, 0, 123, 124, 125, 94,
	71, 0, 0, 77, 0, 0, 0, 0, 84, 0,
	86, 0, 0, 106, 93, 0, 64, 0, 85, 126,
	102, 79, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 141, 0, 0, 0, 0,
	100, 0, 0, 0, 73, 0, 105, 98, 0, 0,
	99, 104, 87, 110, 101, 116, 121, 122, 66, 114,
	108, 91, 81, 82, 65, 0, 103, 76, 80, 75,
	96, 111, 112, 74, 127, 69, 120, 68, 70, 119,
	95, 109, 115, 92, 89, 67, 113, 90, 88, 83,
	78, 0, 0, 0, 107, 117, 128, 97, 0, 123,
	124, 125, 94, 71, 0, 0, 77, 0, 0, 0,
	0, 84, 0, 86, 0, 0, 106, 93, 0, 64,
	0, 85, 126, 102, 79, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 100, 0, 0, 0, 73, 0, 105,
	98, 0, 0, 99, 104, 87, 110, 101, 116, 121,
	122, 66, 114, 108, 91, 81, 82, 65, 0, 103,
	76, 80, 75, 96, 111, 112, 74, 127, 69, 120,
	68, 70, 119, 95, 109, 115, 92, 89, 67, 113,
	90, 88, 83, 78, 0, 0, 0, 107, 117, 128,
	97, 0, 123, 124, 125, 94, 71, 0, 0, 77,
	0, 0, 0, 0, 84, 0, 86, 0, 0, 106,
	93, 0, 64, 0, 85, 126, 102, 79, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 198, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 100, 0, 0, 0,
	73, 0, 105, 98, 0, 0, 99, 104, 87, 110,
	101, 116, 121, 122, 66, 114, 108, 91, 81, 82,
	65, 0, 103, 76, 80, 75, 96, 111, 112, 74,
	127, 69, 120, 68, 70, 119, 95, 109, 115, 92,
	89, 67, 113, 90, 88, 83, 78, 0, 0, 0,
	107, 117, 128, 97, 0, 123, 124, 125, 94, 71,
	0, 0, 77, 0, 0, 0, 0, 84, 0, 86,
	0, 0, 106, 93, 0, 64, 0, 85, 126, 102,
	79, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 100,
	0, 0, 0, 73, 0, 105, 98, 0, 0, 99,
	104, 87, 110, 101, 116, 121, 122, 66, 114, 108,
	91, 81, 82, 65, 0, 103, 76, 80, 75, 96,
	111, 112, 74, 127, 69, 120, 68, 70, 119, 95,
	109, 115, 92, 89, 67, 113, 90, 88, 83, 78,
	0, 0, 0, 107, 117, 128, 97, 0, 123, 124,
	125, 94, 71, 0, 0, 77, 0, 0, 0, 0,
	84, 0, 86, 0, 0, 106, 93, 0, 64, 0,
	85, 126, 102, 79, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 198, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 100, 0, 0, 0, 73, 0, 105, 98,
	0, 0, 99, 104, 87, 110, 101, 116, 121, 122,
	66, 114, 108, 91, 81, 82, 65, 0, 103, 76,
	80, 75, 96, 111, 112, 74, 127, 69, 120, 68,
	192, 119, 95, 109, 115, 92, 89, 67, 113, 90,
	88, 83, 78, 0, 0, 0, 107, 117, 128, 0,
	0, 123, 124, 125, 193, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 64, 0, 85, 126, 102, 79, 118,
}
var yyPact = [...]int{

	1166, -1000, -153, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 692, 709, -1000,
	-1000, -1000, -1000, -1000, 483, 5225, 12, 30, 58, 7117,
	29, 122, 7606, -1000, -1000, -1000, -1000, -1000, 498, -1000,
	-1000, -1000, -1000, -1000, 685, 688, 527, 670, 578, -1000,
	1, 6301, 6954, 7769, -1000, 310, 26, 7606, -126, -2,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 22,
	7606, -1000, 7606, -4, 308, -4, 7606, -1000, 76, -1000,
	-1000, -1000, 7606, 306, 617, 21, 2522, 2522, 2522, 2522,
	2522, 2522, 534, -1000, -1000, -1000, 2522, -1000, -1000, -1000,
	-1000, -1000, -1000, 265, 630, 4504, 4504, 692, -1000, 498,
	-1000, -1000, -1000, 613, -1000, -1000, 193, 6790, 470, 531,
	-1000, -1000, -1000, 664, 5783, 6138, 7606, 450, -1000, 2930,
	358, -1000, 616, -1000, -1000, 118, -1000, 75, -1000, -1000,
	416, -1000, 1178, 304, 2522, 9, 7606, 137, 7606, 2522,
	3, 7606, 661, 505, 7606, -1000, 3542, -1000, 2522, 2522,
	2522, 2522, 2522, 2522, 2522, 2522, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 7606, -1000, -1000, -1000, -1000, 705,
	107, 343, -1000, 4504, 1299, 458, 458, -1000, -1000, 53,
	-1000, -1000, 4870, 4870, 4870, 4870, 4870, 4870, 4870, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 458, 73, -1000, 4312, 458, 458, 458,
	458, 458, 458, 4504, 458, 458, 458, 458, 458, 458,
	458, 458, 458, 458, 458, 458, 458, 447, -1000, 276,
	685, 265, 578, 5946, 544, -1000, -1000, -20, 7606, -1000,
	7443, 6301, 6301, 6301, 6301, 6301, -1000, 568, 564, -1000,
	553, 551, 560, 7606, -1000, 405, 265, 5783, 66, 458,
	-1000, 6627, -1000, -1000, -20, 6301, 7606, -1000, -1000, -1000,
	-1000, -1000, 7443, -1000, 4504, 3338, 2114, 89, 177, -101,
	-1000, -1000, 462, -1000, 462, 462, 462, 462, -63, -63,
	-63, -63, -1000, -1000, -1000, -1000, -1000, 482, -1000, 462,
	462, 462, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	475, 475, 475, 463, 463, 485, -1000, 7606, -1000, 647,
	1047, -1000, 7606, -1000, -1000, 7606, 2522, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	594, 4504, 4504, 264, 4504, 4504, 114, 4870, 179, 209,
	4870, 4870, 4870, 4870, 4870, 4870, 4870, 4870, 4870, 4870,
	4870, 4870, 4870, 4870, 4870, 206, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 300, -1000, 498, 614, 614, 90,
	90, 90, 90, 90, 90, 1510, 3734, 3338, 398, 205,
	4312, 4118, 4118, 4504, 4504, 4118, 679, 132, 205, 7280,
	-1000, 265, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4118,
	4118, 4118, 4118, 4504, -1000, -1000, -1000, 630, -1000, 679,
	690, -1000, 610, 609, 4118, -1000, 460, 458, -1000, 471,
	531, 481, 504, 1169, -1000, -1000, -1000, -1000, 561, -1000,
	554, -1000, -1000, -1000, -1000, -1000, 265, -1000, 24, 18,
	14, 7280, -1000, 698, 469, -1000, -1000, -1000, 205, -1000,
	72, -1000, 442, 1910, -1000, -1000, -1000, -1000, -1000, -1000,
	468, 638, 127, 285, -1000, -1000, 625, -1000, 151, -104,
	-1000, -1000, 229, -63, -63, -1000, -1000, 85, 615, 85,
	85, 85, 257, -1000, -1000, -1000, -1000, 228, -1000, -1000,
	-1000, 226, -1000, 502, 7280, 2522, -1000, -1000, 113, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -21, -1000, 2522, -1000, 591, 114, 129, -1000, -1000,
	331, -1000, -1000, 205, 205, 1459, -1000, -1000, -1000, -1000,
	179, 4870, 4870, 4870, 1172, 1459, 1421, 659, 730, 90,
	168, 168, 87, 87, 87, 87, 87, 832, 832, -1000,
	-1000, -1000, 265, -1000, -1000, -1000, 265, 4118, 431, -1000,
	-1000, 5062, 71, 458, 4504, -1000, 387, 387, 288, 345,
	387, 4118, 160, -1000, 4504, 265, -1000, 387, 265, 387,
	387, -1000, -1000, 7606, -1000, -1000, -1000, -1000, 443, 499,
	7443, 458, -1000, 5600, 7280, 692, 4504, -1000, -1000, 4504,
	464, -1000, 4504, -1000, -1000, -1000, -1000, 458, 458, 458,
	379, -1000, 692, -1000, 3134, 2114, -1000, 2114, 7280, -1000,
	279, -1000, -1000, 488, 42, -1000, -1000, -1000, 355, 85,
	85, -1000, 266, 111, -1000, -1000, -1000, 396, -1000, 424,
	393, 7606, -1000, -1000, -1000, 7606, -1000, -1000, -1000, -1000,
	-1000, 7280, -1000, -1000, -1000, -1000, -1000, -1000, 1172, 1459,
	1386, -1000, 4870, 4870, -1000, -1000, 387, 4118, -1000, -1000,
	6464, -1000, -1000, 2726, 4118, 205, -1000, -1000, 15, 206,
	15, -136, 430, 125, -1000, 4504, 225, -1000, -1000, -1000,
	-1000, -1000, -1000, 698, 6301, -1000, 642, 377, 383, -1000,
	-1000, 3926, 265, 381, 64, 379, 685, 205, 205, 7280,
	205, 7280, 7280, 7280, 5417, 7280, 685, -1000, 1910, -1000,
	363, -1000, 462, -1000, -80, 704, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 252, 199,
	-1000, 184, 2522, -1000, -1000, 618, -1000, 4870, 1459, 1459,
	-1000, -1000, -1000, -1000, 60, 265, 265, 462, 462, -1000,
	462, 463, -1000, 462, -40, 462, -41, 265, 265, 458,
	-133, -1000, 205, 4504, 695, 403, 637, -1000, 458, -1000,
	-1000, 459, 7280, 7280, -1000, -1000, 347, -1000, 289, 289,
	289, 66, -1000, -1000, -1000, 7280, -1000, 91, -1000, -114,
	-1000, 341, 290, -1000, 458, 1459, 2318, -1000, -1000, -1000,
	41, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4870,
	265, 250, 205, 691, 687, 702, -1000, 458, -1000, 498,
	52, -1000, 7280, -1000, -1000, -1000, -1000, -1000, -1000, 154,
	634, -1000, 627, -1000, -1000, -1000, -22, -1000, -1000, -1000,
	-7, -1000, -1000, -1000, 4504, 4504, 7443, 383, 265, 7280,
	-1000, -1000, 235, -1000, -1000, 263, -1000, 7280, 265, 25,
	-144, 205, 366, 358, -1000, -1000, -1000, -1000, -22, 608,
	-1000, 590, -139, -148, -1000, -25, -1000, 577, -1000, -29,
	-142, 458, -145, 4687, -149, 1367, 265, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 938, 25, 592, 937, 935, 934, 924, 923, 922,
	921, 920, 918, 917, 916, 914, 912, 911, 910, 902,
	102, 900, 895, 887, 40, 883, 55, 882, 863, 27,
	165, 24, 42, 104, 862, 16, 74, 51, 861, 38,
	859, 858, 855, 854, 54, 853, 852, 1097, 851, 848,
	8, 11, 847, 846, 844, 841, 44, 45, 840, 838,
	833, 832, 813, 811, 31, 5, 3, 4, 13, 809,
	19, 6, 808, 29, 805, 804, 803, 802, 33, 801,
	37, 800, 17, 35, 797, 14, 49, 30, 22, 9,
	793, 48, 791, 548, 790, 109, 788, 786, 785, 784,
	783, 782, 32, 103, 472, 57, 23, 781, 777, 1014,
	41, 53, 18, 776, 43, 128, 20, 21, 775, 774,
	773, 771, 765, 761, 190, 746, 745, 744, 12, 36,
	743, 742, 46, 15, 741, 740, 739, 736, 50, 733,
	34, 731, 730, 729, 28, 10, 728, 7, 726, 725,
	2, 724, 723, 722, 0, 69, 719, 716, 164,
}
var yyR1 = [...]int{

	0, 152, 153, 153, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 3, 4, 4, 5, 5, 6, 6, 23, 23,
	7, 8, 8, 156, 156, 42, 42, 86, 86, 9,
	9, 90, 90, 90, 108, 108, 10, 10, 10, 10,
	15, 141, 142, 142, 142, 138, 118, 118, 118, 121,
	121, 119, 119, 119, 119, 119, 119, 119, 120, 120,
	120, 120, 120, 122, 122, 122, 122, 122, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 137, 137, 124, 124, 132, 132, 133, 133,
	133, 130, 130, 131, 131, 134, 134, 134, 125, 125,
	125, 125, 125, 125, 127, 127, 135, 135, 128, 128,
	128, 129, 129, 136, 136, 136, 136, 136, 126, 126,
	139, 146, 146, 146, 146, 140, 140, 148, 148, 147,
	143, 143, 143, 144, 144, 144, 145, 145, 145, 11,
	11, 11, 11, 11, 151, 149, 149, 150, 150, 12,
	13, 13, 13, 14, 14, 16, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 18, 18, 19, 19,
	19, 19, 19, 157, 20, 21, 21, 22, 22, 22,
	26, 26, 26, 24, 24, 25, 25, 31, 31, 30,
	30, 32, 32, 32, 32, 107, 107, 107, 106, 106,
	34, 34, 35, 35, 36, 36, 37, 37, 37, 49,
	49, 85, 85, 87, 87, 38, 38, 38, 38, 39,
	39, 40, 40, 41, 41, 113, 113, 112, 112, 112,
	111, 111, 43, 43, 43, 45, 44, 44, 44, 44,
	46, 46, 48, 48, 47, 47, 50, 50, 50, 50,
	51, 51, 33, 33, 33, 33, 33, 33, 33, 94,
	94, 53, 53, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 63, 63, 63, 63, 63, 63, 54,
	54, 54, 54, 54, 54, 54, 29, 29, 64, 64,
	64, 70, 65, 65, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 61, 61, 61, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 60, 60, 60,
	60, 60, 60, 60, 60, 158, 158, 62, 62, 62,
	62, 27, 27, 27, 27, 27, 116, 116, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 74, 74, 28, 28, 72, 72, 73, 75, 75,
	71, 71, 71, 56, 56, 56, 56, 56, 56, 56,
	56, 58, 58, 58, 76, 76, 77, 77, 78, 78,
	79, 79, 80, 81, 81, 81, 82, 82, 82, 82,
	83, 83, 83, 55, 55, 55, 55, 55, 55, 84,
	84, 84, 84, 88, 88, 66, 66, 68, 68, 67,
	69, 89, 89, 91, 92, 92, 95, 95, 96, 96,
	93, 93, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 98, 98, 98, 99, 99, 100, 100,
	100, 101, 101, 104, 104, 105, 105, 109, 109, 110,
	110, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 154, 155, 114, 115, 115,
	115,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 6,
	7, 10, 1, 3, 1, 3, 7, 8, 1, 1,
	8, 8, 6, 1, 1, 1, 3, 0, 4, 5,
	3, 1, 2, 1, 1, 1, 2, 8, 4, 6,
	4, 4, 1, 3, 3, 8, 3, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 1, 4, 4,
	2, 2, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 4, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	2, 2, 2, 2, 0, 3, 0, 1, 0, 3,
	3, 0, 2, 0, 2, 1, 2, 1, 0, 2,
	4, 2, 3, 2, 2, 1, 1, 1, 3, 2,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	7, 7, 4, 5, 7, 1, 3, 8, 8, 5,
	4, 6, 5, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 3, 3, 3, 3, 3, 3,
	2, 4, 2, 2, 2, 3, 2, 1, 2, 2,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	7, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -152, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -16, -17, -18, -19, -3, -4, 6,
	-23, 8, 9, 29, -15, 111, 112, 114, 113, 131,
	115, 124, 48, 24, 125, 126, 129, 130, -154, 7,
	196, 52, -153, 209, -78, 14, -22, 5, -20, -157,
	-20, -20, -20, -20, -141, 52, -100, 118, 69, 116,
	122, -104, 55, -103, 202, 147, 141, 168, 160, 158,
	161, 186, 64, 127, 156, 152, 150, 26, 173, 207,
	151, 145, 146, 172, 31, 204, 33, 135, 171, 167,
	170, 144, 166, 37, 185, 163, 153, 17, 130, 133,
	123, 137, 206, 149, 134, 129, 36, 177, 143, 164,
	136, 154, 155, 169, 142, 165, 138, 178, 208, 162,
	159, 139, 140, 182, 183, 184, 205, 157, 179, -93,
	118, 120, 116, 116, 117, 118, 116, -47, -109, 55,
	-103, 118, 116, 105, 161, 111, 180, 117, 31, 137,
	116, 181, 140, 182, 183, 184, 55, -109, -114, -114,
	-114, -114, -114, -2, -82, 16, 15, -5, -3, -154,
	6, 19, 20, -26, 38, 39, -21, -93, -35, -36,
	-37, -38, -49, -70, -154, -47, 10, -42, -47, -90,
	-89, 186, 161, 185, -91, -71, -104, -109, 55, -103,
	-142, -138, 55, 117, -47, 196, -96, 121, 116, -47,
	-47, -95, 121, 55, -95, -47, 108, -47, 55, 29,
	188, 55, 137, 116, 138, 118, -115, -154, -105, -104,
	-102, 70, 21, 23, 175, 73, 105, 15, 74, 104,
	197, 111, 46, 189, 190, 187, 188, 180, 28, 9,
	24, 125, 20, 98, 113, 77, 78, 128, 22, 126,
	68, 18, 49, 10, 12, 13, 121, 120, 89, 117,
	44, 7, 107, 25, 86, 40, 27, 42, 87, 16,
	191, 192, 30, 201, 132, 100, 47, 34, 71, 66,
	50, 69, 14, 45, 88, 114, 196, 43, 6, 200,
	29, 124, 41, 116, 181, 76, 119, 67, 5, 122,
	8, 48, 51, 193, 194, 195, 32, 75, 11, -115,
	-115, -115, -115, -115, 50, -115, -155, 54, -83, 18,
	30, -33, -52, 71, -57, 28, 22, -56, -53, -71,
	-69, -70, 105, 106, 94, 95, 102, 72, 107, -61,
	-59, -60, -62, 57, 56, 65, 58, 59, 60, 61,
	66, 67, 68, -104, -109, -67, -154, 42, 43, 197,
	198, 201, 199, 74, 32, 187, 195, 194, 193, 191,
	192, 189, 190, 121, 188, 100, 196, -79, -80, -33,
	-78, -2, -20, 34, -24, 20, 63, -48, 25, -47,
	29, 53, -43, -45, -44, -46, 40, 44, 46, 41,
	42, 43, 47, -113, 21, -35, -2, -154, -112, 133,
	-111, 21, -109, 57, -47, -156, 53, 10, 51, -108,
	-105, 57, 53, 29, 79, 108, 54, 53, -118, -121,
	-123, -122, -119, -120, 158, 159, 105, 162, 164, 165,
	166, 167, 168, 169, 170, 171, 172, 173, 127, 154,
	155, 156, 157, 141, 142, 143, 144, 145, 146, 147,
	149, 150, 151, 152, 153, 55, -115, 118, -47, 71,
	-47, -115, 119, -47, 22, 50, -47, -110, -109, -102,
	-115, -115, -115, -115, -115, -115, -115, -115, -47, 8,
	89, 70, 69, 86, 53, 17, -33, -54, 89, 71,
	87, 88, 73, 91, 90, 101, 94, 95, 96, 97,
	98, 99, 100, 92, 93, 104, 79, 80, 81, 82,
	83, 84, 85, -94, -154, -70, -154, 109, 110, -57,
	-57, -57, -57, -57, -57, -57, -154, 108, -65, -33,
	-154, -154, -154, -154, -154, -154, -154, -74, -33, -154,
	-158, -154, -158, -158, -158, -158, -158, -158, -158, -154,
	-154, -154, -154, 53, -81, 23, 24, -82, -155, -26,
	-58, -104, 58, 61, -25, 41, -86, 133, -47, -89,
	-36, -37, -37, -36, -37, 40, 40, 40, 45, 40,
	45, 40, -44, -109, -155, -155, -2, -50, 48, 120,
	49, -154, -111, -86, -35, -47, -114, -91, -33, -105,
	-110, -102, -143, -144, -145, -105, 57, 58, -138, -139,
	-146, 123, 122, -140, 117, 27, -134, 66, 71, -130,
	178, -124, 52, -124, -124, -124, -124, -128, 161, -128,
	-128, -128, 52, -124, -124, -124, -132, 52, -132, -132,
	-133, 52, -133, -101, 51, -47, 22, -97, 114, -151,
	112, 175, 161, 64, 28, 113, 14, 197, 133, 208,
	55, 134, -47, -47, -115, 36, -33, -33, -63, 66,
	71, 67, 68, -33, -33, -57, -64, -67, -70, 62,
	89, 87, 88, 73, -57, -57, -57, -57, -57, -57,
	-57, -57, -57, -57, -57, -57, -57, -57, -57, -116,
	55, 57, 55, -56, -56, -104, -31, 20, -30, -32,
	96, -33, -109, -105, 53, -155, -30, -30, -33, -33,
	-30, -24, -72, -73, 75, -104, -155, -30, -31, -30,
	-30, -80, -83, -92, 18, 10, 32, 32, -30, -55,
	29, 32, -2, -154, -154, -51, 11, -40, -39, 50,
	51, -41, 50, -39, 40, 40, -155, 117, 117, 117,
	-87, -104, -51, -51, 108, 53, -145, 79, 52, 27,
	-140, 55, 55, -125, 28, 66, -131, 179, 58, -128,
	-128, -129, 104, 29, -129, -129, -129, -137, 57, 58,
	58, 50, -104, -115, -114, -98, -99, 119, 21, 117,
	27, 133, -115, 37, 66, 67, 68, -64, -57, -57,
	-57, -29, 128, 70, -155, -155, -30, 53, -107, -106,
	21, -104, 57, 108, -154, -33, -155, -155, 53, 51,
	21, -155, -30, -75, -73, 77, -33, -155, -155, -155,
	-155, -155, -47, -34, 10, -88, 50, -89, -66, -68,
	-67, -154, -2, -84, -104, -87, -78, -33, -33, 52,
	-33, -154, -154, -154, -155, 53, -78, -105, -144, -145,
	-148, -147, -104, 55, -127, 50, 57, 58, 59, 66,
	187, 54, -129, -129, 55, 55, 105, 54, 53, 53,
	54, 53, -47, -47, -114, -104, -29, 70, -57, -57,
	-155, -32, -106, 96, -110, -31, -117, 105, 158, 127,
	156, 152, 172, 163, 177, 154, 178, -116, -117, 202,
	-78, 78, -33, 76, -51, -35, 26, -88, 53, -155,
	-155, -155, 53, 108, -155, -82, -85, -104, -85, -85,
	-85, -112, -104, -82, 54, 53, -124, -135, 175, 8,
	57, 58, 58, -115, 25, -57, 108, -155, -155, -124,
	-124, -124, -133, -124, 146, -124, 146, -155, -155, -154,
	-28, 200, -33, -76, 12, 27, -68, 32, -2, -154,
	-104, -104, 53, 54, -155, -155, -155, -50, -147, -136,
	123, 27, 122, 187, 54, 54, -154, 96, -128, 55,
	-57, -155, 57, -77, 13, 15, 8, -66, -2, 108,
	-104, -126, 64, 27, 27, -149, -150, 133, -27, 89,
	205, -33, -65, -89, -155, -104, 57, -155, 53, -104,
	-155, 203, 47, 206, -150, 32, 37, 204, 207, 135,
	37, 136, 205, -154, 206, -57, 132, 207, -155, -155,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 418, 0, 193,
	193, 193, 193, 193, 0, 478, 460, 0, 0, 0,
	0, 0, 187, 647, 647, 647, 647, 647, 0, 28,
	29, 645, 1, 3, 426, 0, 0, 197, 200, 195,
	460, 0, 0, 0, 46, 0, 0, 636, 0, 458,
	479, 480, 483, 484, 579, 580, 581, 582, 583, 584,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	595, 596, 597, 598, 599, 600, 601, 602, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 618, 619, 620, 621, 622, 623, 624,
	625, 626, 627, 628, 629, 630, 631, 632, 633, 634,
	635, 637, 638, 639, 640, 641, 642, 643, 644, 0,
	0, 461, 0, 456, 0, 456, 0, 164, 264, 487,
	488, 636, 0, 0, 0, 0, 648, 648, 648, 648,
	648, 648, 180, 182, 183, 184, 648, 186, 188, 189,
	190, 191, 192, 22, 430, 0, 0, 418, 24, 0,
	193, 198, 199, 203, 201, 202, 194, 0, 0, 222,
	224, 225, 226, 245, 0, 247, 0, 0, 35, 0,
	40, -2, 585, -2, 451, 0, 400, 0, -2, -2,
	0, 52, 0, 0, 648, 0, 0, 0, 0, 648,
	0, 0, 0, 0, 0, 163, 0, 165, 648, 648,
	648, 648, 648, 648, 648, 648, 174, 649, 650, 485,
	486, 491, 492, 493, 494, 495, 496, 497, 498, 499,
	500, 501, 502, 503, 504, 505, 506, 507, 508, 509,
	510, 511, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
	540, 541, 542, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 554, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 175,
	176, 177, 178, 179, 0, 185, 23, 646, 18, 0,
	0, 427, 272, 0, 277, 279, 0, 314, 315, 316,
	317, 318, 0, 0, 0, 0, 0, 0, 0, 341,
	342, 343, 344, 403, 404, 405, 406, 407, 408, 409,
	410, 281, 282, 400, 0, 450, 0, 0, 0, 0,
	0, 0, 0, 391, 0, 365, 365, 365, 365, 365,
	365, 365, 365, 0, 0, 0, 0, 419, 420, 423,
	426, 22, 200, 0, 205, 204, 196, 37, 0, 263,
	0, 0, 0, 0, 0, 0, 252, 0, 0, 255,
	0, 0, 0, 0, 246, 0, 22, 0, 266, 614,
	248, 0, 250, 251, 37, 0, 0, 33, 34, 647,
	44, 45, 0, 42, 0, 0, 140, 0, 105, 101,
	57, 58, 94, 60, 94, 94, 94, 94, 118, 118,
	118, 118, 86, 87, 88, 89, 90, 0, 73, 94,
	94, 94, 77, 61, 62, 63, 64, 65, 66, 67,
	96, 96, 96, 98, 98, 481, 48, 0, 50, 0,
	0, 152, 0, 160, 457, 0, 648, 265, 489, 490,
	166, 167, 168, 169, 170, 171, 172, 173, 181, 431,
	0, 0, 0, 0, 0, 0, 275, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 300, 301, 302,
	303, 304, 305, 278, 0, 292, 0, 0, 0, 334,
	335, 336, 337, 338, 339, 0, 207, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 203, 0, 392, 0,
	357, 0, 358, 359, 360, 361, 362, 363, 364, 0,
	207, 0, 0, 0, 422, 424, 425, 430, 25, 203,
	0, 411, 0, 0, 0, 206, 0, 0, 262, 270,
	223, 241, 243, 0, 238, 253, 254, 256, 0, 258,
	0, 260, 261, 227, 228, 311, 22, 229, 0, 0,
	0, 0, 249, 270, 270, 36, 39, 452, 453, 401,
	0, -2, 51, 141, 143, 146, 147, 148, 53, 54,
	0, 0, 0, 0, 135, 136, 108, 106, 0, 103,
	102, 59, 0, 118, 118, 80, 81, 121, 0, 121,
	121, 121, 0, 74, 75, 76, 68, 0, 69, 70,
	71, 0, 72, 0, 0, 648, 459, 647, 473, 153,
	462, 463, 464, 465, 466, 467, 468, 469, 470, 471,
	472, 0, 159, 648, 162, 0, 273, 274, 276, 293,
	0, 295, 297, 428, 429, 283, 284, 308, 309, 310,
	0, 0, 0, 0, 306, 288, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 327, 328, 329, 330, 333,
	376, 377, 0, 331, 332, 340, 0, 0, 208, 209,
	211, 215, 0, 401, 0, 449, 0, 0, 0, 0,
	0, 0, 398, 395, 0, 0, 366, 0, 0, 0,
	0, 421, 19, 0, 454, 455, 412, 413, 220, 443,
	0, 0, -2, 0, 0, 418, 0, 235, 242, 0,
	0, 236, 0, 237, 257, 259, -2, 0, 0, 0,
	0, 233, 418, 32, 0, 0, 144, 0, 0, 131,
	0, 133, 134, 114, 0, 107, 56, 104, 0, 121,
	121, 82, 0, 0, 83, 84, 85, 0, 92, 0,
	0, 0, 482, 49, 149, 0, 647, 474, 475, 476,
	477, 0, 161, 432, 294, 296, 298, 285, 306, 289,
	0, 286, 0, 0, 280, 345, 0, 0, 212, 216,
	0, 218, 219, 0, 207, 313, 348, 349, 0, 0,
	0, 0, 418, 0, 396, 0, 0, 356, 367, 368,
	369, 370, 20, 270, 0, 26, 0, 443, 433, 445,
	447, 0, 22, 0, 439, 0, 426, 271, 239, 0,
	244, 0, 0, 0, 247, 0, 426, 402, 142, 145,
	0, 137, 94, 132, 116, 0, 109, 110, 111, 112,
	113, 95, 78, 79, 122, 119, 120, 91, 0, 0,
	99, 0, 648, 150, 151, 0, 287, 0, 307, 290,
	346, 210, 217, 213, 0, 0, 0, 94, 94, 381,
	94, 98, 384, 94, 386, 94, 389, 0, 0, 0,
	393, 355, 399, 0, 414, 221, 0, 27, 0, 448,
	-2, 0, 0, 0, 38, 30, 0, 231, 0, 0,
	0, 266, 234, 31, 130, 0, 139, 123, 117, 0,
	93, 0, 0, 47, 0, 291, 0, 347, 350, 378,
	118, 382, 383, 385, 387, 388, 390, 352, 351, 0,
	0, 0, 397, 416, 0, 0, 446, 0, -2, 0,
	441, 440, 0, 240, 267, 268, 269, 230, 138, 128,
	0, 125, 127, 115, 97, 100, 0, 214, 379, 380,
	371, 354, 394, 21, 0, 0, 0, 436, 22, 0,
	232, 55, 0, 124, 126, 0, 155, 0, 0, 0,
	0, 417, 415, 444, -2, 442, 129, 154, 0, 0,
	353, 0, 0, 0, 156, 0, 372, 0, 375, 0,
	373, 0, 0, 0, 0, 0, 0, 374, 157, 158,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 209,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:275
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:280
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:281
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:285
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:304
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 19:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:312
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:316
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 21:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:323
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:329
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:333
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:339
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:343
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:350
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 27:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:362
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:374
		{
			yyVAL.str = InsertStr
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:378
		{
			yyVAL.str = ReplaceStr
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:384
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:390
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:394
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:399
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:400
		{
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:404
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:408
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 37:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:413
		{
			yyVAL.partitions = nil
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:417
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:423
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:427
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:438
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:442
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:448
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:453
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:458
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:462
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:468
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:475
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:482
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:487
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:491
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:497
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:508
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:518
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:523
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:529
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:533
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:537
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:541
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:545
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:549
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:553
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:559
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:565
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:571
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:577
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:583
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:591
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:595
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:599
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:603
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:607
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:613
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:617
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:621
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:625
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:629
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:641
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:645
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:653
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:657
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:661
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:665
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:671
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:676
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:681
		{
			yyVAL.optVal = nil
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:685
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:690
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:694
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:702
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:706
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:712
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:720
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:724
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:729
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:733
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:739
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:743
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:747
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:752
		{
			yyVAL.optVal = nil
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:756
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:760
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:764
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:768
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:772
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:777
		{
			yyVAL.optVal = nil
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:781
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:786
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:790
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:795
		{
			yyVAL.str = ""
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:799
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:803
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:808
		{
			yyVAL.str = ""
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:812
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:817
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:821
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:825
		{
			yyVAL.colKeyOpt = colKey
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:829
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:833
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:838
		{
			yyVAL.optVal = nil
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:842
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:848
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:854
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:858
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:862
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:866
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:872
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:876
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:882
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:886
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:892
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:897
		{
			yyVAL.str = ""
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:901
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:905
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:913
		{
			yyVAL.str = yyDollar[1].str
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:917
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:921
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:927
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:931
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:935
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:941
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 150:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:945
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 151:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:950
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:955
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:959
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 154:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:965
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:971
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:975
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 157:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:981
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 158:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:985
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:991
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:997
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 161:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1005
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1010
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1020
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1024
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1029
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1039
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1048
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1060
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1064
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1080
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1084
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1092
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1096
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1108
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1118
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1128
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1134
		{
			yyVAL.statement = &OtherRead{}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1138
		{
			yyVAL.statement = &OtherRead{}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.statement = &OtherRead{}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1155
		{
			setAllowComments(yylex, true)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.bytes2 = nil
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1175
		{
			yyVAL.str = UnionStr
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.str = UnionAllStr
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1183
		{
			yyVAL.str = UnionDistinctStr
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1188
		{
			yyVAL.str = ""
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1192
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1196
		{
			yyVAL.str = SQLCacheStr
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.str = ""
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1205
		{
			yyVAL.str = DistinctStr
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1210
		{
			yyVAL.str = ""
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.str = StraightJoinHint
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1219
		{
			yyVAL.selectExprs = nil
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1223
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1233
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1239
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1243
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 214:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1256
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1260
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1264
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1271
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1280
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1304
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1324
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1328
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1334
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1363
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1369
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1371
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1375
		{
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1377
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1381
		{
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1383
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.empty = struct{}{}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.empty = struct{}{}
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1391
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1395
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.str = JoinStr
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.str = JoinStr
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.str = JoinStr
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.str = StraightJoinStr
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.str = LeftJoinStr
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1436
		{
			yyVAL.str = LeftJoinStr
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1440
		{
			yyVAL.str = RightJoinStr
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.str = RightJoinStr
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1450
		{
			yyVAL.str = NaturalJoinStr
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1454
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1464
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1468
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1483
		{
			yyVAL.indexHints = nil
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1487
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 268:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1491
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1495
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1500
		{
			yyVAL.expr = nil
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1522
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1540
		{
			yyVAL.str = ""
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1544
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1550
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1554
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1560
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1580
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1584
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1588
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 291:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.str = IsNullStr
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.str = IsNotNullStr
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.str = IsTrueStr
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.str = IsNotTrueStr
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.str = IsFalseStr
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.str = IsNotFalseStr
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1628
		{
			yyVAL.str = EqualStr
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.str = LessThanStr
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.str = GreaterThanStr
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1640
		{
			yyVAL.str = LessEqualStr
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.str = GreaterEqualStr
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.str = NotEqualStr
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1657
		{
			yyVAL.expr = nil
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1661
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1667
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1671
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1675
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1681
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1687
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1691
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1697
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1701
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1705
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1709
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1713
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1717
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1721
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1737
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1741
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1745
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1757
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1761
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1781
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1785
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1793
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1807
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1815
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1833
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 346:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1837
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 347:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1841
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 350:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 351:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1863
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 352:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1867
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 353:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1871
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 354:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1875
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1883
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1910
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1920
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1925
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.str = ""
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1961
		{
			yyVAL.str = BooleanModeStr
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1965
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 374:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.str = QueryExpansionStr
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1989
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1993
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1997
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2001
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2005
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2019
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.expr = nil
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2048
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.str = string("")
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2078
		{
			yyVAL.expr = nil
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2088
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2092
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 402:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2102
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2106
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2110
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2114
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2118
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2126
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2130
		{
			yyVAL.expr = &NullVal{}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2136
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2149
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2154
		{
			yyVAL.exprs = nil
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2158
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.expr = nil
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2167
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2172
		{
			yyVAL.orderBy = nil
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2176
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2182
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2186
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2192
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2197
		{
			yyVAL.str = AscScr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.str = AscScr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.str = DescScr
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2210
		{
			yyVAL.limit = nil
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2222
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2227
		{
			yyVAL.str = ""
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2231
		{
			yyVAL.str = ForUpdateStr
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2235
		{
			yyVAL.str = ShareModeStr
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2256
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 436:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2261
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 438:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2269
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2284
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 442:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2288
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2293
		{
			yyVAL.updateExprs = nil
		}
	case 444:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2297
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2313
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2317
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2323
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2329
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2343
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2349
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2358
		{
			yyVAL.byt = 0
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2360
		{
			yyVAL.byt = 1
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2363
		{
			yyVAL.empty = struct{}{}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.empty = struct{}{}
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2368
		{
			yyVAL.str = ""
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2370
		{
			yyVAL.str = IgnoreStr
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.empty = struct{}{}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2376
		{
			yyVAL.empty = struct{}{}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.empty = struct{}{}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2380
		{
			yyVAL.empty = struct{}{}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.empty = struct{}{}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2384
		{
			yyVAL.empty = struct{}{}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.empty = struct{}{}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2388
		{
			yyVAL.empty = struct{}{}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.empty = struct{}{}
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2392
		{
			yyVAL.empty = struct{}{}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2394
		{
			yyVAL.empty = struct{}{}
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2397
		{
			yyVAL.empty = struct{}{}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2399
		{
			yyVAL.empty = struct{}{}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.empty = struct{}{}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.empty = struct{}{}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2407
		{
			yyVAL.empty = struct{}{}
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2410
		{
			yyVAL.empty = struct{}{}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2412
		{
			yyVAL.empty = struct{}{}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2414
		{
			yyVAL.empty = struct{}{}
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2417
		{
			yyVAL.empty = struct{}{}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2419
		{
			yyVAL.empty = struct{}{}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2423
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2427
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2434
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2440
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2444
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2451
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2631
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2640
		{
			decNesting(yylex)
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2645
		{
			forceEOF(yylex)
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2650
		{
			forceEOF(yylex)
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2654
		{
			forceEOF(yylex)
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2658
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
