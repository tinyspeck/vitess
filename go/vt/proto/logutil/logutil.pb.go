// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: logutil.proto

package logutil

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/golang/protobuf/proto"
	vttime "vitess.io/vitess/go/vt/proto/vttime"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Level is the level of the log messages.
type Level int32

const (
	// The usual logging levels.
	// Should be logged using logging facility.
	Level_INFO    Level = 0
	Level_WARNING Level = 1
	Level_ERROR   Level = 2
	// For messages that may contains non-logging events.
	// Should be logged to console directly.
	Level_CONSOLE Level = 3
)

var Level_name = map[int32]string{
	0: "INFO",
	1: "WARNING",
	2: "ERROR",
	3: "CONSOLE",
}

var Level_value = map[string]int32{
	"INFO":    0,
	"WARNING": 1,
	"ERROR":   2,
	"CONSOLE": 3,
}

func (x Level) String() string {
	return proto.EnumName(Level_name, int32(x))
}

func (Level) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_31f5dd3702a8edf9, []int{0}
}

// Event is a single logging event
type Event struct {
	Time                 *vttime.Time `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Level                Level        `protobuf:"varint,2,opt,name=level,proto3,enum=logutil.Level" json:"level,omitempty"`
	File                 string       `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	Line                 int64        `protobuf:"varint,4,opt,name=line,proto3" json:"line,omitempty"`
	Value                string       `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_31f5dd3702a8edf9, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetTime() *vttime.Time {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Event) GetLevel() Level {
	if m != nil {
		return m.Level
	}
	return Level_INFO
}

func (m *Event) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *Event) GetLine() int64 {
	if m != nil {
		return m.Line
	}
	return 0
}

func (m *Event) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterEnum("logutil.Level", Level_name, Level_value)
	proto.RegisterType((*Event)(nil), "logutil.Event")
}

func init() { proto.RegisterFile("logutil.proto", fileDescriptor_31f5dd3702a8edf9) }

var fileDescriptor_31f5dd3702a8edf9 = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x8f, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x7b, 0x9b, 0x8c, 0xb5, 0xb7, 0xb5, 0x84, 0xc1, 0x45, 0x70, 0x11, 0x06, 0xe9, 0x22,
	0xb8, 0xc8, 0x40, 0x85, 0xee, 0x55, 0xa2, 0x14, 0x4a, 0x02, 0xa3, 0x20, 0xb8, 0x53, 0xb8, 0x96,
	0x81, 0x69, 0x47, 0xec, 0x74, 0xde, 0xc2, 0xbd, 0x8f, 0xe4, 0xd2, 0x47, 0x90, 0xf8, 0x22, 0x92,
	0x49, 0xdc, 0x9d, 0xf3, 0x9d, 0xc3, 0xfd, 0xc1, 0x13, 0x63, 0x37, 0x07, 0xa7, 0x4d, 0xf1, 0xf6,
	0x6e, 0x9d, 0xe5, 0xa3, 0xde, 0x9e, 0x4d, 0xbd, 0x73, 0x7a, 0x4b, 0x1d, 0x3e, 0xff, 0x00, 0x64,
	0xa5, 0xa7, 0x9d, 0xe3, 0x02, 0xe3, 0x96, 0xa7, 0x20, 0x20, 0x9f, 0x2c, 0xa6, 0x45, 0x5f, 0x7b,
	0xd0, 0x5b, 0x52, 0x21, 0xe1, 0x73, 0x64, 0x86, 0x3c, 0x99, 0x74, 0x28, 0x20, 0x9f, 0x2d, 0x66,
	0xc5, 0xff, 0x86, 0x75, 0x4b, 0x55, 0x17, 0x72, 0x8e, 0xf1, 0xab, 0x36, 0x94, 0x46, 0x02, 0xf2,
	0xb1, 0x0a, 0xba, 0x65, 0x46, 0xef, 0x28, 0x8d, 0x05, 0xe4, 0x91, 0x0a, 0x9a, 0x9f, 0x22, 0xf3,
	0xcf, 0xe6, 0x40, 0x29, 0x0b, 0xc5, 0xce, 0x5c, 0x2c, 0x91, 0x85, 0x69, 0xfc, 0x18, 0xe3, 0x55,
	0x75, 0x5b, 0x27, 0x03, 0x3e, 0xc1, 0xd1, 0xe3, 0x95, 0xaa, 0x56, 0xd5, 0x5d, 0x02, 0x7c, 0x8c,
	0xac, 0x54, 0xaa, 0x56, 0xc9, 0xb0, 0xe5, 0x37, 0x75, 0x75, 0x5f, 0xaf, 0xcb, 0x24, 0xba, 0x5e,
	0x7e, 0x35, 0x19, 0x7c, 0x37, 0x19, 0xfc, 0x34, 0x19, 0x7c, 0xfe, 0x66, 0x83, 0xa7, 0xb9, 0xd7,
	0x8e, 0xf6, 0xfb, 0x42, 0x5b, 0xd9, 0x29, 0xb9, 0xb1, 0xd2, 0x3b, 0x19, 0xfe, 0x96, 0xfd, 0xe9,
	0x2f, 0x47, 0xc1, 0x5e, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xc4, 0x19, 0xa7, 0x2e, 0x01,
	0x00, 0x00,
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintLogutil(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Line != 0 {
		i = encodeVarintLogutil(dAtA, i, uint64(m.Line))
		i--
		dAtA[i] = 0x20
	}
	if len(m.File) > 0 {
		i -= len(m.File)
		copy(dAtA[i:], m.File)
		i = encodeVarintLogutil(dAtA, i, uint64(len(m.File)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Level != 0 {
		i = encodeVarintLogutil(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != nil {
		{
			size, err := m.Time.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogutil(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLogutil(dAtA []byte, offset int, v uint64) int {
	offset -= sovLogutil(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovLogutil(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovLogutil(uint64(m.Level))
	}
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovLogutil(uint64(l))
	}
	if m.Line != 0 {
		n += 1 + sovLogutil(uint64(m.Line))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovLogutil(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLogutil(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLogutil(x uint64) (n int) {
	return sovLogutil(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogutil
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogutil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogutil
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogutil
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &vttime.Time{}
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogutil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= Level(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogutil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogutil
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogutil
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Line", wireType)
			}
			m.Line = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogutil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Line |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogutil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogutil
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogutil
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogutil(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogutil
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogutil
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogutil(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogutil
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogutil
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogutil
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLogutil
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLogutil
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLogutil
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLogutil        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogutil          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLogutil = fmt.Errorf("proto: unexpected end of group")
)
