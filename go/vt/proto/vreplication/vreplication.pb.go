// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vreplication.proto

package vreplication

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VRepStreamState int32

const (
	VRepStreamState_RUNNING VRepStreamState = 0
	VRepStreamState_STOPPED VRepStreamState = 1
)

var VRepStreamState_name = map[int32]string{
	0: "RUNNING",
	1: "STOPPED",
}

var VRepStreamState_value = map[string]int32{
	"RUNNING": 0,
	"STOPPED": 1,
}

func (x VRepStreamState) String() string {
	return proto.EnumName(VRepStreamState_name, int32(x))
}

func (VRepStreamState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_49b1f10145c8b767, []int{0}
}

// VRepStream represents a single VReplication stream in a multi-cluster Vitess deployment.
// Concretely, a VRepStream maps to a row in the _vt.vreplication table.
// based on https://vitess.io/docs/reference/features/vreplication/#vreplicationexec
type VRepStream struct {
	Id                   int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Workflow             string          `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
	Source               string          `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Pos                  string          `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
	StopPos              string          `protobuf:"bytes,5,opt,name=stop_pos,json=stopPos,proto3" json:"stop_pos,omitempty"`
	MaxTps               int64           `protobuf:"varint,6,opt,name=max_tps,json=maxTps,proto3" json:"max_tps,omitempty"`
	MaxReplicationLag    int64           `protobuf:"varint,7,opt,name=max_replication_lag,json=maxReplicationLag,proto3" json:"max_replication_lag,omitempty"`
	Cell                 string          `protobuf:"bytes,8,opt,name=cell,proto3" json:"cell,omitempty"`
	TabletTypes          []string        `protobuf:"bytes,9,rep,name=tablet_types,json=tabletTypes,proto3" json:"tablet_types,omitempty"`
	TimeUpdated          int64           `protobuf:"varint,10,opt,name=time_updated,json=timeUpdated,proto3" json:"time_updated,omitempty"`
	TransactionTimestamp int64           `protobuf:"varint,11,opt,name=transaction_timestamp,json=transactionTimestamp,proto3" json:"transaction_timestamp,omitempty"`
	State                VRepStreamState `protobuf:"varint,12,opt,name=state,proto3,enum=vreplication.VRepStreamState" json:"state,omitempty"`
	Message              string          `protobuf:"bytes,13,opt,name=message,proto3" json:"message,omitempty"`
	DbName               string          `protobuf:"bytes,14,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	Cluster              string          `protobuf:"bytes,15,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Keyspace             string          `protobuf:"bytes,16,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard                string          `protobuf:"bytes,17,opt,name=shard,proto3" json:"shard,omitempty"`
	TabletAlias          string          `protobuf:"bytes,18,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *VRepStream) Reset()         { *m = VRepStream{} }
func (m *VRepStream) String() string { return proto.CompactTextString(m) }
func (*VRepStream) ProtoMessage()    {}
func (*VRepStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_49b1f10145c8b767, []int{0}
}

func (m *VRepStream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VRepStream.Unmarshal(m, b)
}
func (m *VRepStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VRepStream.Marshal(b, m, deterministic)
}
func (m *VRepStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VRepStream.Merge(m, src)
}
func (m *VRepStream) XXX_Size() int {
	return xxx_messageInfo_VRepStream.Size(m)
}
func (m *VRepStream) XXX_DiscardUnknown() {
	xxx_messageInfo_VRepStream.DiscardUnknown(m)
}

var xxx_messageInfo_VRepStream proto.InternalMessageInfo

func (m *VRepStream) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VRepStream) GetWorkflow() string {
	if m != nil {
		return m.Workflow
	}
	return ""
}

func (m *VRepStream) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *VRepStream) GetPos() string {
	if m != nil {
		return m.Pos
	}
	return ""
}

func (m *VRepStream) GetStopPos() string {
	if m != nil {
		return m.StopPos
	}
	return ""
}

func (m *VRepStream) GetMaxTps() int64 {
	if m != nil {
		return m.MaxTps
	}
	return 0
}

func (m *VRepStream) GetMaxReplicationLag() int64 {
	if m != nil {
		return m.MaxReplicationLag
	}
	return 0
}

func (m *VRepStream) GetCell() string {
	if m != nil {
		return m.Cell
	}
	return ""
}

func (m *VRepStream) GetTabletTypes() []string {
	if m != nil {
		return m.TabletTypes
	}
	return nil
}

func (m *VRepStream) GetTimeUpdated() int64 {
	if m != nil {
		return m.TimeUpdated
	}
	return 0
}

func (m *VRepStream) GetTransactionTimestamp() int64 {
	if m != nil {
		return m.TransactionTimestamp
	}
	return 0
}

func (m *VRepStream) GetState() VRepStreamState {
	if m != nil {
		return m.State
	}
	return VRepStreamState_RUNNING
}

func (m *VRepStream) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *VRepStream) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

func (m *VRepStream) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *VRepStream) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

func (m *VRepStream) GetShard() string {
	if m != nil {
		return m.Shard
	}
	return ""
}

func (m *VRepStream) GetTabletAlias() string {
	if m != nil {
		return m.TabletAlias
	}
	return ""
}

func init() {
	proto.RegisterEnum("vreplication.VRepStreamState", VRepStreamState_name, VRepStreamState_value)
	proto.RegisterType((*VRepStream)(nil), "vreplication.VRepStream")
}

func init() { proto.RegisterFile("vreplication.proto", fileDescriptor_49b1f10145c8b767) }

var fileDescriptor_49b1f10145c8b767 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xdd, 0x6e, 0xd3, 0x40,
	0x10, 0x85, 0xc9, 0xaf, 0x93, 0x49, 0x48, 0xd3, 0xa1, 0xc0, 0x80, 0x84, 0x14, 0xb8, 0x0a, 0x54,
	0x8a, 0x25, 0xf2, 0x04, 0x20, 0x10, 0x42, 0x42, 0x21, 0x72, 0x52, 0x2e, 0xb8, 0xb1, 0x26, 0xf6,
	0x12, 0xac, 0xda, 0xd9, 0x95, 0x67, 0x93, 0xa6, 0xef, 0xc4, 0x43, 0xa2, 0x5d, 0xa7, 0xd4, 0xf4,
	0x6e, 0xcf, 0x77, 0xce, 0xae, 0x47, 0x67, 0x0c, 0x78, 0x28, 0x95, 0xc9, 0xb3, 0x84, 0x6d, 0xa6,
	0x77, 0x33, 0x53, 0x6a, 0xab, 0x71, 0x58, 0x67, 0x6f, 0xfe, 0xb4, 0x01, 0x7e, 0x44, 0xca, 0xac,
	0x6c, 0xa9, 0xb8, 0xc0, 0x11, 0x34, 0xb3, 0x94, 0x1a, 0x93, 0xc6, 0xb4, 0x15, 0x35, 0xb3, 0x14,
	0x5f, 0x42, 0xef, 0x46, 0x97, 0xd7, 0xbf, 0x72, 0x7d, 0x43, 0xcd, 0x49, 0x63, 0xda, 0x8f, 0xfe,
	0x69, 0x7c, 0x06, 0x5d, 0xd1, 0xfb, 0x32, 0x51, 0xd4, 0xf2, 0xce, 0x49, 0xe1, 0x18, 0x5a, 0x46,
	0x0b, 0xb5, 0x3d, 0x74, 0x47, 0x7c, 0x01, 0x3d, 0xb1, 0xda, 0xc4, 0x0e, 0x77, 0x3c, 0x0e, 0x9c,
	0x5e, 0x6a, 0xc1, 0xe7, 0x10, 0x14, 0x7c, 0x8c, 0xad, 0x11, 0xea, 0xfa, 0xaf, 0x76, 0x0b, 0x3e,
	0xae, 0x8d, 0xe0, 0x0c, 0x9e, 0x38, 0xa3, 0x36, 0x6b, 0x9c, 0xf3, 0x96, 0x02, 0x1f, 0x3a, 0x2f,
	0xf8, 0x18, 0xdd, 0x3b, 0xdf, 0x78, 0x8b, 0x08, 0xed, 0x44, 0xe5, 0x39, 0xf5, 0xfc, 0xfb, 0xfe,
	0x8c, 0xaf, 0x61, 0x68, 0x79, 0x93, 0x2b, 0x1b, 0xdb, 0x5b, 0xa3, 0x84, 0xfa, 0x93, 0xd6, 0xb4,
	0x1f, 0x0d, 0x2a, 0xb6, 0x76, 0xc8, 0x47, 0xb2, 0x42, 0xc5, 0x7b, 0x93, 0xb2, 0x55, 0x29, 0x81,
	0x7f, 0x7f, 0xe0, 0xd8, 0x55, 0x85, 0x70, 0x0e, 0x4f, 0x6d, 0xc9, 0x3b, 0xe1, 0xc4, 0x4f, 0xe1,
	0x2c, 0xb1, 0x5c, 0x18, 0x1a, 0xf8, 0xec, 0x45, 0xcd, 0x5c, 0xdf, 0x79, 0x38, 0x87, 0x8e, 0x58,
	0xb6, 0x8a, 0x86, 0x93, 0xc6, 0x74, 0xf4, 0xfe, 0xd5, 0xec, 0xbf, 0x4d, 0xdc, 0x37, 0xbe, 0x72,
	0xa1, 0xa8, 0xca, 0x22, 0x41, 0x50, 0x28, 0x11, 0xde, 0x2a, 0x7a, 0x5c, 0xd5, 0x74, 0x92, 0xae,
	0xa6, 0x74, 0x13, 0xef, 0xb8, 0x50, 0x34, 0xaa, 0xca, 0x4e, 0x37, 0x0b, 0x2e, 0xfc, 0x95, 0x24,
	0xdf, 0x8b, 0x55, 0x25, 0x9d, 0x55, 0x57, 0x4e, 0xd2, 0xad, 0xee, 0x5a, 0xdd, 0x8a, 0xe1, 0x44,
	0xd1, 0xb8, 0x5a, 0xdd, 0x9d, 0xc6, 0x0b, 0xe8, 0xc8, 0x6f, 0x2e, 0x53, 0x3a, 0xf7, 0x46, 0x25,
	0x6a, 0x75, 0x71, 0x9e, 0xb1, 0x10, 0x7a, 0xf3, 0x54, 0xd7, 0x07, 0x87, 0xde, 0x5d, 0xc2, 0xd9,
	0x83, 0xd9, 0x71, 0x00, 0x41, 0x74, 0xb5, 0x58, 0x7c, 0x5d, 0x7c, 0x19, 0x3f, 0x72, 0x62, 0xb5,
	0xfe, 0xbe, 0x5c, 0x7e, 0xfe, 0x34, 0x6e, 0x7c, 0xbc, 0xfc, 0xf9, 0xf6, 0x90, 0x59, 0x25, 0x32,
	0xcb, 0x74, 0x58, 0x9d, 0xc2, 0xad, 0x0e, 0x0f, 0x36, 0xf4, 0x7f, 0x62, 0x58, 0xaf, 0x64, 0xd3,
	0xf5, 0x6c, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x28, 0x58, 0xca, 0xb3, 0x02, 0x00, 0x00,
}
