// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: throttlerservice.proto

package throttlerservice

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	throttlerdata "vitess.io/vitess/go/vt/proto/throttlerdata"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("throttlerservice.proto", fileDescriptor_33af55db6d07f810) }

var fileDescriptor_33af55db6d07f810 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0xc9, 0x28, 0xca,
	0x2f, 0x29, 0xc9, 0x49, 0x2d, 0x2a, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x12, 0x40, 0x17, 0x97, 0x12, 0x86, 0x8b, 0xa4, 0x24, 0x96, 0x24, 0x42, 0x94,
	0x19, 0x7d, 0x66, 0xe6, 0xe2, 0x0c, 0x81, 0x89, 0x0b, 0xf9, 0x72, 0x71, 0xf8, 0x26, 0x56, 0x04,
	0x25, 0x96, 0xa4, 0x16, 0x0b, 0xc9, 0xe9, 0xa1, 0xaa, 0x87, 0x49, 0x04, 0xa5, 0x16, 0x96, 0xa6,
	0x16, 0x97, 0x48, 0xc9, 0xe3, 0x94, 0x2f, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x55, 0x62, 0x10, 0x0a,
	0xe6, 0xe2, 0x0a, 0x4e, 0x2d, 0x81, 0x4a, 0x08, 0x29, 0xa0, 0x69, 0x40, 0x48, 0xc1, 0x8c, 0x54,
	0xc4, 0xa3, 0x02, 0x6e, 0x68, 0x2a, 0x97, 0x80, 0x7b, 0x6a, 0x89, 0x73, 0x7e, 0x5e, 0x5a, 0x66,
	0x7a, 0x69, 0x51, 0x62, 0x49, 0x66, 0x7e, 0x9e, 0x90, 0x1a, 0x9a, 0x46, 0x74, 0x05, 0x30, 0x0b,
	0xd4, 0x09, 0xaa, 0x83, 0x5b, 0x93, 0xc7, 0x25, 0x1c, 0x5a, 0x90, 0x92, 0x58, 0x92, 0x8a, 0x6a,
	0x93, 0x26, 0x9a, 0x09, 0x58, 0xd4, 0xc0, 0x2c, 0xd3, 0x22, 0x46, 0x29, 0xdc, 0xbe, 0x6c, 0x2e,
	0xa1, 0xa0, 0xd4, 0x62, 0x74, 0x8f, 0x69, 0xa0, 0x99, 0x81, 0xa9, 0x04, 0x66, 0x9b, 0x26, 0x11,
	0x2a, 0x61, 0x96, 0x39, 0xd9, 0x9f, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47,
	0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x44, 0xe9, 0x96, 0x65, 0x96, 0xa4, 0x16, 0x17, 0xeb, 0x65,
	0xe6, 0xeb, 0x43, 0x58, 0xfa, 0xe9, 0xf9, 0xfa, 0x65, 0x25, 0xfa, 0xe0, 0x54, 0xa2, 0x8f, 0x9e,
	0x96, 0x92, 0xd8, 0xc0, 0xe2, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x62, 0x05, 0x96,
	0x7e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ThrottlerClient is the client API for Throttler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ThrottlerClient interface {
	// MaxRates returns the current max rate for each throttler of the process.
	MaxRates(ctx context.Context, in *throttlerdata.MaxRatesRequest, opts ...grpc.CallOption) (*throttlerdata.MaxRatesResponse, error)
	// SetMaxRate allows to change the current max rate for all throttlers
	// of the process.
	SetMaxRate(ctx context.Context, in *throttlerdata.SetMaxRateRequest, opts ...grpc.CallOption) (*throttlerdata.SetMaxRateResponse, error)
	// GetConfiguration returns the configuration of the MaxReplicationlag module
	// for the given throttler or all throttlers if "throttler_name" is empty.
	GetConfiguration(ctx context.Context, in *throttlerdata.GetConfigurationRequest, opts ...grpc.CallOption) (*throttlerdata.GetConfigurationResponse, error)
	// UpdateConfiguration (partially) updates the configuration of the
	// MaxReplicationlag module for the given throttler or all throttlers if
	// "throttler_name" is empty.
	// If "copy_zero_values" is true, fields with zero values will be copied
	// as well.
	UpdateConfiguration(ctx context.Context, in *throttlerdata.UpdateConfigurationRequest, opts ...grpc.CallOption) (*throttlerdata.UpdateConfigurationResponse, error)
	// ResetConfiguration resets the configuration of the MaxReplicationlag module
	// to the initial configuration for the given throttler or all throttlers if
	// "throttler_name" is empty.
	ResetConfiguration(ctx context.Context, in *throttlerdata.ResetConfigurationRequest, opts ...grpc.CallOption) (*throttlerdata.ResetConfigurationResponse, error)
}

type throttlerClient struct {
	cc *grpc.ClientConn
}

func NewThrottlerClient(cc *grpc.ClientConn) ThrottlerClient {
	return &throttlerClient{cc}
}

func (c *throttlerClient) MaxRates(ctx context.Context, in *throttlerdata.MaxRatesRequest, opts ...grpc.CallOption) (*throttlerdata.MaxRatesResponse, error) {
	out := new(throttlerdata.MaxRatesResponse)
	err := c.cc.Invoke(ctx, "/throttlerservice.Throttler/MaxRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *throttlerClient) SetMaxRate(ctx context.Context, in *throttlerdata.SetMaxRateRequest, opts ...grpc.CallOption) (*throttlerdata.SetMaxRateResponse, error) {
	out := new(throttlerdata.SetMaxRateResponse)
	err := c.cc.Invoke(ctx, "/throttlerservice.Throttler/SetMaxRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *throttlerClient) GetConfiguration(ctx context.Context, in *throttlerdata.GetConfigurationRequest, opts ...grpc.CallOption) (*throttlerdata.GetConfigurationResponse, error) {
	out := new(throttlerdata.GetConfigurationResponse)
	err := c.cc.Invoke(ctx, "/throttlerservice.Throttler/GetConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *throttlerClient) UpdateConfiguration(ctx context.Context, in *throttlerdata.UpdateConfigurationRequest, opts ...grpc.CallOption) (*throttlerdata.UpdateConfigurationResponse, error) {
	out := new(throttlerdata.UpdateConfigurationResponse)
	err := c.cc.Invoke(ctx, "/throttlerservice.Throttler/UpdateConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *throttlerClient) ResetConfiguration(ctx context.Context, in *throttlerdata.ResetConfigurationRequest, opts ...grpc.CallOption) (*throttlerdata.ResetConfigurationResponse, error) {
	out := new(throttlerdata.ResetConfigurationResponse)
	err := c.cc.Invoke(ctx, "/throttlerservice.Throttler/ResetConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThrottlerServer is the server API for Throttler service.
type ThrottlerServer interface {
	// MaxRates returns the current max rate for each throttler of the process.
	MaxRates(context.Context, *throttlerdata.MaxRatesRequest) (*throttlerdata.MaxRatesResponse, error)
	// SetMaxRate allows to change the current max rate for all throttlers
	// of the process.
	SetMaxRate(context.Context, *throttlerdata.SetMaxRateRequest) (*throttlerdata.SetMaxRateResponse, error)
	// GetConfiguration returns the configuration of the MaxReplicationlag module
	// for the given throttler or all throttlers if "throttler_name" is empty.
	GetConfiguration(context.Context, *throttlerdata.GetConfigurationRequest) (*throttlerdata.GetConfigurationResponse, error)
	// UpdateConfiguration (partially) updates the configuration of the
	// MaxReplicationlag module for the given throttler or all throttlers if
	// "throttler_name" is empty.
	// If "copy_zero_values" is true, fields with zero values will be copied
	// as well.
	UpdateConfiguration(context.Context, *throttlerdata.UpdateConfigurationRequest) (*throttlerdata.UpdateConfigurationResponse, error)
	// ResetConfiguration resets the configuration of the MaxReplicationlag module
	// to the initial configuration for the given throttler or all throttlers if
	// "throttler_name" is empty.
	ResetConfiguration(context.Context, *throttlerdata.ResetConfigurationRequest) (*throttlerdata.ResetConfigurationResponse, error)
}

// UnimplementedThrottlerServer can be embedded to have forward compatible implementations.
type UnimplementedThrottlerServer struct {
}

func (*UnimplementedThrottlerServer) MaxRates(ctx context.Context, req *throttlerdata.MaxRatesRequest) (*throttlerdata.MaxRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaxRates not implemented")
}
func (*UnimplementedThrottlerServer) SetMaxRate(ctx context.Context, req *throttlerdata.SetMaxRateRequest) (*throttlerdata.SetMaxRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMaxRate not implemented")
}
func (*UnimplementedThrottlerServer) GetConfiguration(ctx context.Context, req *throttlerdata.GetConfigurationRequest) (*throttlerdata.GetConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}
func (*UnimplementedThrottlerServer) UpdateConfiguration(ctx context.Context, req *throttlerdata.UpdateConfigurationRequest) (*throttlerdata.UpdateConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfiguration not implemented")
}
func (*UnimplementedThrottlerServer) ResetConfiguration(ctx context.Context, req *throttlerdata.ResetConfigurationRequest) (*throttlerdata.ResetConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetConfiguration not implemented")
}

func RegisterThrottlerServer(s *grpc.Server, srv ThrottlerServer) {
	s.RegisterService(&_Throttler_serviceDesc, srv)
}

func _Throttler_MaxRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(throttlerdata.MaxRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThrottlerServer).MaxRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/throttlerservice.Throttler/MaxRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThrottlerServer).MaxRates(ctx, req.(*throttlerdata.MaxRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Throttler_SetMaxRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(throttlerdata.SetMaxRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThrottlerServer).SetMaxRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/throttlerservice.Throttler/SetMaxRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThrottlerServer).SetMaxRate(ctx, req.(*throttlerdata.SetMaxRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Throttler_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(throttlerdata.GetConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThrottlerServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/throttlerservice.Throttler/GetConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThrottlerServer).GetConfiguration(ctx, req.(*throttlerdata.GetConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Throttler_UpdateConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(throttlerdata.UpdateConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThrottlerServer).UpdateConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/throttlerservice.Throttler/UpdateConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThrottlerServer).UpdateConfiguration(ctx, req.(*throttlerdata.UpdateConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Throttler_ResetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(throttlerdata.ResetConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThrottlerServer).ResetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/throttlerservice.Throttler/ResetConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThrottlerServer).ResetConfiguration(ctx, req.(*throttlerdata.ResetConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Throttler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "throttlerservice.Throttler",
	HandlerType: (*ThrottlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MaxRates",
			Handler:    _Throttler_MaxRates_Handler,
		},
		{
			MethodName: "SetMaxRate",
			Handler:    _Throttler_SetMaxRate_Handler,
		},
		{
			MethodName: "GetConfiguration",
			Handler:    _Throttler_GetConfiguration_Handler,
		},
		{
			MethodName: "UpdateConfiguration",
			Handler:    _Throttler_UpdateConfiguration_Handler,
		},
		{
			MethodName: "ResetConfiguration",
			Handler:    _Throttler_ResetConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "throttlerservice.proto",
}
